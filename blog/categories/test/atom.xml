<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | 蕲春人的博客]]></title>
  <link href="http://qichunren.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://qichunren.github.io/"/>
  <updated>2013-05-21T13:42:14+08:00</updated>
  <id>http://qichunren.github.io/</id>
  <author>
    <name><![CDATA[qichunren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用ffaker来产生随机数据]]></title>
    <link href="http://qichunren.github.io/blog/2012-01-19-use-ffaker/"/>
    <updated>2012-01-19T22:01:00+08:00</updated>
    <id>http://qichunren.github.io/blog/use-ffaker</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/EmmanuelOga/ffaker">ffaker</a>是一个用来产生随机name\email之类的工具，可以用在开发时先产生一些有意义的随机数据，将数据写在db/seeds.rb中，这样你就不用每次急燥地添加一些asasddfdsf这样的数据。一个好的工作开发环境，可以让心情舒畅，效率加倍。</p>

<p>在db/seeds.rb中，如果要产生100个用户名，直接这样做：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ffaker&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; 100.times do</span>
</span><span class='line'><span class="sr">   user = User.new</span>
</span><span class='line'><span class="sr">   user.name = Faker::Name.name =&gt; &quot;David Cao&quot;</span>
</span><span class='line'><span class="sr">   user.email = Faker::Internet.email =&gt; &quot;qichunren@cqror.com&quot;</span>
</span><span class='line'><span class="sr">   user.save</span>
</span><span class='line'><span class="sr"> end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我前一段时间，提交了<a href="https://github.com/EmmanuelOga/ffaker/pull/9">一点代码</a> ，可以产生天朝的姓名：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ffaker&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Faker::NameCN.first_name # =&gt; 鑫洋</span>
</span><span class='line'><span class="sr">Faker::NameCN.last_name # =&gt; 禹</span>
</span><span class='line'><span class="sr">Faker::NameCN.name # =&gt; 俊伶漫</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ffaker目前最新的版本是1.2，可以产生中文的姓名。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近实践中学到的Rails测试技巧]]></title>
    <link href="http://qichunren.github.io/blog/2011-04-20-rails-test-note/"/>
    <updated>2011-04-20T07:12:12+08:00</updated>
    <id>http://qichunren.github.io/blog/rails-test-note</id>
    <content type="html"><![CDATA[<p>最近花时间又将项目中的测试再次仔细地过了一遍。通过挖掘发现了几个提高测试效率的技巧，记一下。 <em>不学习就要落后啊，Ruby的世界进化得太快了，测试技术也是如此。</em></p>

<ul>
<li><p>FactoryGirl这个东西好用级了，之前虽然已经在项目中使用她了，但我之前还是没有完全挖掘出她的特性。对其中的association这个特性我是最喜欢了，让我完全不用关注关联记录的外键数据对应。想起曾经的Rails自带的Fixtures，还阵阵寒，那是给人给的东西么。当应用中的数据表关联多了，再加上业务功能多了，用Fixtures测试绝对会折磨死人，在不同的Fixtures文件中穿梭，人肉拼装适合各种业务场景的数据，那真费脑细胞。而FactoryGirl真的是用起来称心如意啊，她不是数据的fixture,她应该是作为一种数据的构建器(data builder)，在测试中可以让你专注去构建 测试场景的数据和写测试断言。</p></li>
<li><p>自动测试gem： autotest. 我和同事之前商量约定好，说提交代码前一定先在本地运行一遍rspec测试，然后再提交。这样工作得很好。我今天研究了一下autotest这东西，发现真是好东西啊。它可以检测到你改动了某个文件，然后就自动地为你执行一次这个文件关联的测试。这可好了，又省了不少事。</p></li>
<li><p>接第二条，比起自动监测改动的文件自动测试，你还得关心测试的结果，更好的是有自动通知测试结果的好工具。mac下的 <a href="http://growl.info/">growl</a> 就是这样一个工具。autotest-growl这样的一个Gem很好的做了这个事情。你再不不用切换到测试的终端窗口去查看测试结果，你只需要专心地写着代码，然后屏幕边上会自动显现一个半透明的提示框来告知测试结果（最喜欢看到就是一个绿宝石的提示框）。当然这个工具只有在Mac OSX上才有的。</p></li>
<li><p>测试不是很快，这个也有解决方法。Spork就是这样的一个工具，它事先启动一个后端的DRB服务器（端口8989），加载Rails应用的环境。然后每次rspec的测试可以直接与spork打交道，省了加载Rails应用环境这个比较耗时的步骤，直接运行测试用例，速度飞快。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么样写好的ruby业务代码]]></title>
    <link href="http://qichunren.github.io/blog/2011-04-19-write-buautiful-ruby-business-code/"/>
    <updated>2011-04-19T05:12:12+08:00</updated>
    <id>http://qichunren.github.io/blog/write-buautiful-ruby-business-code</id>
    <content type="html"><![CDATA[<p><em>标题很强，心中却很烦乱，写下这个解解闷，吐吐苦水。</em></p>

<p>最近与一个小Ruby程序员共事，交流起来还没有什么问题，可是看他写的代码，虽然坏不到哪里去，但我还是心里一阵阵反感，这和我平时阅读从github 上拉下的代码的感觉是完成不一样的。</p>

<p>给我不爽的地方有：首先他在用程序员的思维写业务代码。这一点虽然对程序的最终运行结果没有什么影响，但我是非常反感这一点。我一直对自己说，我要写可读的英语的，并且本身能说明它是要做什么事情的代码，尤其我是当在做电子商务方面的业务系统。</p>

<p>我们应该站在设计人员的角度来写代码。我们是整个系统的设计师，控制人员，管理人员，我们可以通过代码的方式为系统来设计各种业务规则。而不仅仅是为了用程序代码来码完业务操作。这种特点的典型特征就是在程序中（特别是在model 中）有很多这样的方法命名，如update_xxx, delete_xxx, set_x_to_y,这种类似的命名，它就是纯粹的数据操作，而不是用代码来表达业务!</p>

<p>都说程序要写耦合内聚什么的，模块化啦，抽取啦，减少重复，但是在这之间把握一个平衡还是要有很多磨练的。我之前一些时候在写Rails代码时就时常被这个问题折磨过，心里总是努力想把代码写得好一点，可最终完成业务目标时，看着自己的代码总是感觉不对劲.</p>

<p>不劲的地方有：</p>

<p>总是在考虑“我这段代码到底是单独抽出来呢，还是就这样放在其中呢”，“我感觉这个命名怎么那么别扭啊，哪里不对了？”等等之内的问题，然后花时间在这些代码段之间穿梭。其实我现在想明白了。要想让自己写的代码（我这里尤其是处理业务逻辑的代码）看得明白，读得顺畅，要把握好几点。</p>

<p>第一，要记得上面第一条中说到的。</p>

<p>第二，英语表达要不能太糟糕。 他英语不太过关，写的一些代码都是去google翻译查的，这我还是不说什么，可以有的翻译真的好离谱啊，再加上他自己的一些润色，完全可以我把搞迷糊。</p>

<p>第三点，要清楚业务需要的实质，明白什么是将来可能变化的，什么是肯定不变化的。明白了这一点，就知道一个业务操作中，到底是应该把方法怎么折分。不变的代码，就都写在一个方法中也是没有问题的，即实代码长一点，那样整个操作是一个整体，到时时候维护起来会很明了。</p>

<p>第四点，对于业务操作的方法，一般写得内聚紧凑一点很是没有什么问题的。不要惦记什么一个方法不能超过多少行代码的信条。</p>

<p>第五点就是测试了，这个一定得搞。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用capybara来自动化测试业务流程]]></title>
    <link href="http://qichunren.github.io/blog/2011-03-26-use-capybara-to-integrate-test/"/>
    <updated>2011-03-26T05:12:12+08:00</updated>
    <id>http://qichunren.github.io/blog/use-capybara-to-integrate-test</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jnicklas/capybara">capybara</a> 是一个基于 <a href="https://github.com/brynary/webrat">webrat</a></p>

<p>修改的浏览器测试工具，我最近使用它来为我做的后台系统自动化一些工作，而不用我每次重复了无意义的步骤。<br/>
  使用capybara可以良好地访问有javascript脚本的页面，但是有一个问题就是如果你页面中有confirm这个的等待用户点击“确定”的对话框时capybaray就无能为力了，我在stackoverfollow上找到了解决办法，就是直接让confirm方法返回true:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">page</span><span class="p">.</span><span class="nx">evaluate_script</span><span class="p">(</span><span class="s1">&#39;window.confirm = function() { return true; }&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>   下面这个例子来自我项目中 <a href="https://gist.github.com/884682">真实的代码</a> 可以测试一个用户的认证操作，以test开头的方法都会执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说rspec的测试(1)]]></title>
    <link href="http://qichunren.github.io/blog/2010-12-21-talk-about-rspec-1/"/>
    <updated>2010-12-21T17:12:12+08:00</updated>
    <id>http://qichunren.github.io/blog/talk-about-rspec-1</id>
    <content type="html"><![CDATA[<p>虽然之前就用过rspec来测试系统的各种业务流程和业务逻辑，最近又在开始一个新的系统的测试，写起来又感觉很开心，很安心。所以就想说说用rspec来写rails项目测试的总结和体会。</p>

<p>rspec项目 在github上很活跃，rspec2较之 1.x的版本变得更模块化了，从<a href="https://github.com/rspec/">这里</a> 看以到rspec的各个子项目，rspec2依赖于<a href="https://github.com/rspec/rspec-core">rspec-core</a> <a href="https://github.com/rspec/rspec-expectations">rspec-expectations</a> <a href="https://github.com/rspec/rspec-mocks">rspec-mocks</a></p>

<p>在Rails 3项目中，只需要在指定rspec-rails这个gem即可，它会自动依赖rspec2。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rspec-rails&quot;</span><span class="p">,</span> <span class="s2">&quot;2.3.1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在rspec2中，Rails3项的测试被分成控制器（controller）、模型（model）、请求（request）、路由（routing）、助手（helper）、视图（view）六大块的测试。从中可以看出rspec2力图让你的测试变得更为职责清楚和模块化，减少各种类型测试的影响，让测试变得更有效率和保证。我个人最喜欢的是模型（model）和请求的测试（request），这两个测试写得最为直接和有效，其它类型的测试如controller测试在复杂一点的业务中需要mock、stub等等，会将代码弄得有些复杂，当然这其中也有我对mock和stub没有用得理解的原因，不过我感觉测试controller还不如直接测试request来得直接。另外在factory-girl的帮助下能很快地写出有保证的测试。</p>

<p>在这里我贴出我系统中登录测试这一块的例子，从中可以看出测试目的是很明显的，测试效率是很高的。</p>

<p>这里的管理员(Admin)登录系统(AdminSession)是用到authlogic这个gem的。</p>

<p>这个是factory-girl的数据文件：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;spec/</span><span class="n">factories</span><span class="o">/</span><span class="n">admins</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;encoding: utf-8&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Factory</span><span class="o">.</span><span class="n">define</span> <span class="ss">:admin</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">sequence</span><span class="p">(</span><span class="ss">:login</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="s2">&quot;worker</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">name</span>             <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">login</span>      <span class="p">}</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">email</span>            <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">login</span><span class="si">}</span><span class="s2">@gmail.com&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">password</span>         <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">login</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">login</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  a.active           false</span>
</span><span class='line'><span class="sr">  a.dept             0</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Factory</span><span class="o">.</span><span class="n">define</span> <span class="ss">:actived_admin</span><span class="p">,</span> <span class="ss">:parent</span> <span class="o">=&gt;</span> <span class="ss">:admin</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">login</span> <span class="s2">&quot;actived_admin&quot;</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">active</span>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Factory.define :unactived_admin, :class =&gt; Admin do |a|</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里测试管理员登录系统的逻辑：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;spec/</span><span class="n">requests</span><span class="o">/</span><span class="n">root_request_spec</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;encoding: utf-8&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe &quot;AdminSessions&quot; do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">login_with</span><span class="p">(</span><span class="n">admin_login</span><span class="p">,</span> <span class="n">admin_password</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;post &quot;/</span><span class="n">admin_session</span><span class="s2">&quot;, :admin_session =&amp;gt; { :login =&amp;gt; admin_login, </span>
</span><span class='line'><span class="s2">                                           :password =&amp;gt; admin_password }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  describe &quot;</span><span class="no">GET</span><span class="sr"> /&quot; do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">it</span> <span class="s2">&quot;should redirect to login page&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">new_admin_session_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">get</span> <span class="n">new_admin_session_path</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s2">&quot;你还没有登录，请先登录&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;should not redirect to loign page if logged&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">current_admin</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="s2">&quot;actived_admin&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">login_with</span><span class="p">(</span><span class="s2">&quot;actived_admin&quot;</span><span class="p">,</span> <span class="s2">&quot;actived_admin&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s2">&quot;登录成功!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;should show error info with wrong loign id&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">current_admin</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="s2">&quot;actived_admin&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">login_with</span><span class="p">(</span><span class="s2">&quot;actived_admin&quot;</span><span class="p">,</span> <span class="s2">&quot;adminpassword_error&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">contain</span><span class="p">(</span><span class="s2">&quot;你输入的帐号或密码不正确!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
