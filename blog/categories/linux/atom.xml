<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 蕲春人的博客]]></title>
  <link href="http://qichunren.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://qichunren.github.io/"/>
  <updated>2013-10-10T13:11:18+08:00</updated>
  <id>http://qichunren.github.io/</id>
  <author>
    <name><![CDATA[qichunren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用SSH代理来访访问远程mysql机器]]></title>
    <link href="http://qichunren.github.io/blog/2012-06-04-use-ssh-proxy-port-trick/"/>
    <updated>2012-06-04T17:31:00+08:00</updated>
    <id>http://qichunren.github.io/blog/use-ssh-proxy-port-trick</id>
    <content type="html"><![CDATA[<p>默认安装的mysql的Linux机器基于安全的原因，一般不支持mysql的远程连接访问。有几种方法可以修改配置来让mysql服务器支持远程连接。但是通过ssh的代理功能，可以不用修改服务器配置，来支持从远程连接mysql服务器。</p>

<p>在本地通过ssh连接远程的mysql所在的服务器</p>

<p><code>
ssh -L 1036:localhost:3306 root@xxx.xx.xx.xxx
</code></p>

<p>这样就将远程的mysql主机代理到本地了，端口是1036。 <a href="http://zh.wikipedia.org/zh/SSH">SSH</a>太强大了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过update-rc.d来管理Ubuntu系统的自动启动程序]]></title>
    <link href="http://qichunren.github.io/blog/2012-03-14-how-to-managing-services-with-update-rc-dot-d/"/>
    <updated>2012-03-14T11:30:00+08:00</updated>
    <id>http://qichunren.github.io/blog/how-to-managing-services-with-update-rc-dot-d</id>
    <content type="html"><![CDATA[<p>转载, 并记下我的使用心得。</p>

<p>Linux services can be started, stopped and reloaded with the use of scripts stocked in /etc/init.d/.
However, during start up or when changing runlevel, those scripts are searched in /etc/rcX.d/ where X is the runlevel number.
This tutorial will explain how one can activate, deactivate or modify a service start up.
When installing a new service under debian, the default is to enable it. So for instance, if you just installed apache2 package, after you installed it, apache service will be started and so will it be upon the next reboots.
If you do not use apache all the time, you might want to disable this service from starting up upon boot up and simply start it manually when you actually need it by running this command:
<code>
/etc/init.d/apache2 start
</code></p>

<p>You could either disable this service on boot up by removing any symbolic links in <strong><em>/etc/rcX.d/SYYapache2</em></strong> or by using <strong>update-rc.d</strong>.
The advantage of using update-rc.d is that it will take care of removing/adding any required links to /etc/init.d automatically.
Taking apache2 as an example, let's examine how /etc/rcX.d is looking like:</p>

<p>```</p>

<h1>ls -l /etc/rc?.d/*apache2</h1>

<p>lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc0.d/K91apache2 -> ../init.d/apache2
lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc1.d/K91apache2 -> ../init.d/apache2
lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc2.d/S91apache2 -> ../init.d/apache2
lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc3.d/S91apache2 -> ../init.d/apache2
lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc4.d/S91apache2 -> ../init.d/apache2
lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc5.d/S91apache2 -> ../init.d/apache2
lrwxrwxrwx 1 root root 17 2007-07-05 22:51 /etc/rc6.d/K91apache2 -> ../init.d/apache2
```</p>

<p>As you can see, for runlevels 0, 1 and 6 there is a K at the beginning of the link, for runlevels 2, 3, 4 and 5, there is a S. Those two letters stands for Kill and Start.
On Debian and Ubuntu, runlevels 2, 3, 4 and 5 are multi-users runlevels.
Runlevel 0 is Halt.
Runlevel 1 is single user mode
Runlevel 6 is reboot</p>

<h3>1. Removing A Service</h3>

<p>If you want to totally disable apache2 service by hand, you would need to delete every single link in /etc/rcX.d/. Using <strong>update-rc.d</strong> it is as simple as:
<code>
update-rc.d -f apache2 remove
</code>
The use of <strong><em>-f</em></strong> is to force the removal of the symlinks even if there is still /etc/init.d/apache2.</p>

<pre><code>    Note: This command will only disable the service until next time the service is upgraded. If you want to make sure the service won't be re-enabled upon upgrade, you should also type the following:
    # update-rc.d apache2 stop 80 0 1 2 3 4 5 6 .
</code></pre>

<h3>2. Adding A Service</h3>

<h4>2.1. Default Priorities</h4>

<p>Now, if you want to re-add this service to be started on boot up, you can simply use:</p>

<p>```</p>

<h1>update-rc.d apache2 defaults</h1>

<p>Adding system startup for /etc/init.d/apache2 ...
/etc/rc0.d/K20apache2 -> ../init.d/apache2
/etc/rc1.d/K20apache2 -> ../init.d/apache2
/etc/rc6.d/K20apache2 -> ../init.d/apache2
/etc/rc2.d/S20apache2 -> ../init.d/apache2
/etc/rc3.d/S20apache2 -> ../init.d/apache2
/etc/rc4.d/S20apache2 -> ../init.d/apache2
/etc/rc5.d/S20apache2 -> ../init.d/apache2
```</p>

<h4>2.2. Custom Priorities</h4>

<p>But as you can see, the default value is 20 which is pretty different than 91 ... a S20 link is started before a S91 and and K91 is kill before K20.
To force apache2 to be started with priorities 91 for both Start and Kill, we need to use the following command:
```</p>

<h1>update-rc.d apache2 defaults 91</h1>

<p>Adding system startup for /etc/init.d/apache2 ...
/etc/rc0.d/K91apache2 -> ../init.d/apache2
/etc/rc1.d/K91apache2 -> ../init.d/apache2
/etc/rc6.d/K91apache2 -> ../init.d/apache2
/etc/rc2.d/S91apache2 -> ../init.d/apache2
/etc/rc3.d/S91apache2 -> ../init.d/apache2
/etc/rc4.d/S91apache2 -> ../init.d/apache2
/etc/rc5.d/S91apache2 -> ../init.d/apache2
```</p>

<h3>2.3. Different Priorities For Start And Kill</h3>

<p> Alternatively, if you want to set different priorities for Start than for Kill, let say Start with 20 and Kill with 80, you will need to run:</p>

<p>```</p>

<h1>update-rc.d apache2 defaults 20 80</h1>

<p>Adding system startup for /etc/init.d/apache2 ...
/etc/rc0.d/K80apache2 -> ../init.d/apache2
/etc/rc1.d/K80apache2 -> ../init.d/apache2
/etc/rc6.d/K80apache2 -> ../init.d/apache2
/etc/rc2.d/S20apache2 -> ../init.d/apache2
/etc/rc3.d/S20apache2 -> ../init.d/apache2
/etc/rc4.d/S20apache2 -> ../init.d/apache2
/etc/rc5.d/S20apache2 -> ../init.d/apache2
```</p>

<h2>3. Specifying Custom Runlevels</h2>

<p>Finally, if you only want to Start and Kill on specific runlevels, like for instance starting apache with priority 20 on runlevels 2, 3, 4 and 5 and Kill with priority 80 on runlevels 0, 1 and 6:</p>

<p>```</p>

<h1>update-rc.d apache2 start 20 2 3 4 5 . stop 80 0 1 6 .</h1>

<p>Adding system startup for /etc/init.d/apache2 ...
/etc/rc0.d/K80apache2 -> ../init.d/apache2
/etc/rc1.d/K80apache2 -> ../init.d/apache2
/etc/rc6.d/K80apache2 -> ../init.d/apache2
/etc/rc2.d/S20apache2 -> ../init.d/apache2
/etc/rc3.d/S20apache2 -> ../init.d/apache2
/etc/rc4.d/S20apache2 -> ../init.d/apache2
/etc/rc5.d/S20apache2 -> ../init.d/apache2
```</p>

<p>Or, to start with priority 20 for runlevel 2, 3 and 4 and priority 30 for runlevel 5 and kill with priority 80 for runlevel 0, 1 and 6:</p>

<p>```</p>

<h1>update-rc.d apache2 start 20 2 3 4 . start 30 5 . stop 80 0 1 6 .</h1>

<p>Adding system startup for /etc/init.d/apache2 ...
/etc/rc0.d/K80apache2 -> ../init.d/apache2
/etc/rc1.d/K80apache2 -> ../init.d/apache2
/etc/rc6.d/K80apache2 -> ../init.d/apache2
/etc/rc2.d/S20apache2 -> ../init.d/apache2
/etc/rc3.d/S20apache2 -> ../init.d/apache2
/etc/rc4.d/S20apache2 -> ../init.d/apache2
/etc/rc5.d/S30apache2 -> ../init.d/apache2
```</p>

<h2>我的总结</h2>

<p>通过 update-rc.d 来管理Linux下开机自动运行，的确很方便，但是我在实际部署实践中，还是遇到了一些问题，导致开机后没有正常自动启动，但是手工通过service xxx start可以启动。我经过排查发现，原因是在Linux系统启动中，在执行/etc/init.d/中的脚本时，此时系统有可能没有加载好系统中的PATH变量，所以需要在init.d脚本中手工指定，对于使用Ruby脚本写的程序，需要GEM_HOME\GEM_PATH等环境变量，我这里是用RVM来管理Ruby的，这是我使用的：
<code>
PATH="/usr/local/rvm/gems/ruby-1.9.2-p290/bin:/usr/local/rvm/rubies/ruby-1.9.2-p290/bin:/usr/local/rvm/bin:/opt/node/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games"
RUBY_VERSION="ruby-1.9.2-p290"
GEM_HOME="/usr/local/rvm/gems/ruby-1.9.2-p290"
GEM_PATH="/usr/local/rvm/gems/ruby-1.9.2-p290:/usr/local/rvm/gems/ruby-1.9.2-p290@global"
export PATH=$PATH
export RUBY_VERSION=$RUBY_VERSION
export GEM_HOME=$GEM_HOME
export GEM_PATH=$GEM_PATH
</code></p>

<p> 另外还有一些其它的变量（如果你的启动程序需要），也需要手工指定，如在Ruby 1.9中，就有可能需要指定，比如说unicorn启动脚本：
<code>
export LANG='en_US.UTF-8'
</code></p>

<p>最后附上一个常用的init.d启动脚本的样本：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/init.d/ntgps  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;BEGIN INIT INFO&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Provides:          gps&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Required-Start:    <span class="nv">$syslog</span> <span class="nv">$remote_fs</span> <span class="nv">$network</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Required-Stop:     <span class="nv">$syslog</span> <span class="nv">$remote_fs</span> <span class="nv">$network</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Should-Start:      fam&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Should-Stop:       fam&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Default-Start:     2 3 4 5&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Default-Stop:      0 1 6&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Short-Description: Start the gps.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;END INIT INFO&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PATH<span class="o">=</span>/usr/local/rvm/gems/ruby-1.9.2-p290/bin:/usr/local/rvm/gems/ruby-1.9.2-p290@global/bin:/usr/local/rvm/rubies/ruby-1.9.2-p290/bin:/usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</span><span class='line'><span class="nv">DAEMON</span><span class="o">=</span>/www/georgia/current/lib/gps/gps.rb
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span>ntgps
</span><span class='line'><span class="nv">DESC</span><span class="o">=</span><span class="s2">&quot;ntgps daemon&quot;</span>
</span><span class='line'><span class="nv">PIDFILE</span><span class="o">=</span>/var/run/<span class="nv">$NAME</span>.pid
</span><span class='line'><span class="nv">SCRIPTNAME</span><span class="o">=</span>/etc/init.d/<span class="nv">$NAME</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DAEMON_OPTS<span class="o">=</span><span class="s2">&quot;&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set -e
</span><span class='line'>. /lib/lsb/init-functions
</span><span class='line'><span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span><span class="s1">&#39;en_US.UTF-8&#39;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GEM_HOME</span><span class="o">=</span>/usr/local/rvm/gems/ruby-1.9.2-p290
</span><span class='line'><span class="nb">export </span><span class="nv">GEM_PATH</span><span class="o">=</span>/usr/local/rvm/gems/ruby-1.9.2-p290:/usr/local/rvm/gems/ruby-1.9.2-p290@global&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;case <span class="s2">&quot;$1&quot;</span> in&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;start<span class="o">)</span>
</span><span class='line'>    log_daemon_msg <span class="s2">&quot;Starting $DESC&quot;</span> <span class="nv">$NAME</span>
</span><span class='line'>    <span class="k">if</span> ! start-stop-daemon --start -m --background --oknodo --quiet --pidfile <span class="nv">$PIDFILE</span> --exec /usr/local/rvm/rubies/ruby-1.9.2-p290/bin/ruby <span class="nv">$DAEMON</span> -- <span class="nv">$DAEMON_OPTS</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span>log_end_msg 1
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span>log_end_msg 0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    ;;
</span><span class='line'>stop<span class="o">)</span>
</span><span class='line'>    log_daemon_msg <span class="s2">&quot;Stopping $DESC&quot;</span> <span class="nv">$NAME</span>
</span><span class='line'>    <span class="k">if </span><span class="nb">kill</span>  -9 <span class="sb">`</span>cat <span class="nv">$PIDFILE</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span>rm -f <span class="nv">$PIDFILE</span>
</span><span class='line'>        log_end_msg 0
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span>log_end_msg 1
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    ;;
</span><span class='line'>restart<span class="o">)</span>
</span><span class='line'>    <span class="nv">$0</span> stop
</span><span class='line'>    <span class="nv">$0</span> start
</span><span class='line'>    ;;
</span><span class='line'>status<span class="o">)</span>
</span><span class='line'>    status_of_proc -p <span class="s2">&quot;$PIDFILE&quot;</span> <span class="s2">&quot;$DAEMON&quot;</span> <span class="nv">$NAME</span> &amp;amp;&amp;amp; <span class="nb">exit </span>0 <span class="o">||</span> <span class="nb">exit</span> <span class="nv">$?</span>
</span><span class='line'>    ;;
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Usage: $SCRIPTNAME {start|stop|restart|status}&quot;</span> &amp;gt;&amp;amp;2
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'>    ;;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;esac&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;exit 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Resources:</h2>

<p><a href="http://www.debuntu.org/how-to-manage-services-with-update-rc.d">How-To: Managing services with update-rc.d</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell学习小记录]]></title>
    <link href="http://qichunren.github.io/blog/2011-10-18-learning-shell-tip-note/"/>
    <updated>2011-10-18T20:44:00+08:00</updated>
    <id>http://qichunren.github.io/blog/learning-shell-tip-note</id>
    <content type="html"><![CDATA[<p>最近为了一些自动化的任务，要写一些脚本。可以使用Ruby脚本、Ruby的rake\thor等等，我为了简洁和性能，我了解了一下Shell，发现用Shell来做这个事情更合适。性能，命令行，管道，丰富的现有工具，基于Linux本身，Shell真是一个好东西。以前认为用Ruby来做这个事情是一个不错的选择，现在知道了，那是因为相比起Shell来，更熟悉Ruby，程序员总是喜欢自己熟悉的领域，而排斥自己不熟悉的领域。其实多了解一下其它方面的，更利用自己工作的开展，提高工作效率。</p>

<p>我随便总结一下几个知识点</p>

<h4>字符串</h4>

<p>声明一个字符串变量后，使用的时候，在变量名前面加一个$符号才能将其值取出来</p>

<p><code>
DATA_FILE=data.tar.gz
echo $DATA_FILE
</code></p>

<p>字符串拼接
<code>
DATA_DIR=/Users/caojinhua/code/
DATA_FILE=data.tar.gz
DATA_PATH=$DATA_DIR""$DATA_FILE
</code></p>

<p>将命令执行的结果保存在变量中
<code>
sha1=`ls -al`
</code></p>

<h4>if语句结构</h4>

<p>if语句条件测试命令：
<code>
[ -d DIR ]  如果DIR存在并且是一个目录则为真
[ -f FILE ] 如果FILE存在且是一个普通文件则为真
[ -z STRING ]   如果STRING的长度为零则为真
[ -n STRING ]   如果STRING的长度非零则为真
[ STRING1 = STRING2 ]   如果两个字符串相同则为真
[ STRING1 != STRING2 ]  如果字符串不相同则为真
[ ARG1 OP ARG2 ]
</code></p>

<p>ARG1和ARG2应该是整数或者取值为整数的变量，OP是-eq（等于）-ne（不等于）-lt（小于）-le（小于等于）-gt（大于）-ge（大于等于）之中的一个</p>

<p>之前弄错好几次，中括号前后的空格不能少。</p>

<p>if语句的结构</p>

<p>```
if [ xxx ]
then
fi</p>

<p>if [ xxx ]; then</p>

<p>else</p>

<p>fi</p>

<p>if [ xxx ]; then</p>

<p>elif [ ! xxx ]; then</p>

<p>fi
```</p>

<h4>时间格式化</h4>

<p>```
date  +%Y%m%d</p>

<p>a=<code>date +%Y%m%d</code>
echo $a
```</p>

<h4>参考资料</h4>

<p><a href="http://learn.akae.cn/media/ch31s05.html">Shell脚本语法</a></p>
]]></content>
  </entry>
  
</feed>
