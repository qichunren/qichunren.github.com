<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蕲春人的博客</title>
    <description>记录我的生活。</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Linux Deb package notes</title>
        <description>&lt;p&gt;使用dh_make命令可以在项目中生成默认的debian目录，此debian目录中包含了默认的deb打包规范的一系列文件。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;dh_make --createorig --single -e whyruby@gmail.com -c gpl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是在项目目录中执行dh_make命令的时候，会提示项目目录必须要是project-name-1.0类似的形式。&lt;/p&gt;

&lt;p&gt;在dh_make命令执行后，继续运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;dpkg-buildpackage -uc -us
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会在当前项目目录的上一层生成deb文件。&lt;/p&gt;

&lt;p&gt;deb包的构建规范中规定了一系列的规则，最常用的有安装时的文件路经对应，此文件位于debian/install中，如将编译文件的可执行文件将安装的/usr/bin目录，将程序执行图标文件放在/usr/share/applications目录。install文件中类似这样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;bin/new-pis usr/bin
new-pis.desktop /usr/share/applications
new-pis-icon.png /usr/share/pixmaps
db/data.db /var/lib/new-pis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;debian目录中其它的文件如提供cron job的文件，日志文件分割等以后深究。&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics.en.html&quot;&gt;Basics of the Debian package management system &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.debian.org/doc/manuals/debmake-doc/index.en.html&quot;&gt;Guide for Debian Maintainers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tldp.org/HOWTO/Debian-Binary-Package-Building-HOWTO/index.html&quot;&gt;Debian Binary Package Building HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 06 Aug 2015 20:30:00 +0800</pubDate>
        <link>/development/2015/08/06/linux-deb-notes/</link>
        <guid isPermaLink="true">/development/2015/08/06/linux-deb-notes/</guid>
      </item>
    
      <item>
        <title>对使用http请求的GET和POST的一点思考</title>
        <description>&lt;p&gt;对使用http请求的GET和POST的一点思考&lt;/p&gt;

&lt;p&gt;在web开发中，一个http请求方法有GET / HEAD / PUT / DELETE / OPTIONS / CONNECT几个形式，对此不多究。我今天主要想谈谈常见的GET和POST两种方法的使用思考。&lt;/p&gt;

&lt;p&gt;先来讲一个我最近做的一个 Ruby on Rails 项目，在那个项目中，用户(User)可以选择某一个数据集合(DataSet)项目参与其中做任务(Task)。模型关系如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :tasks       
end

class DataSet &amp;lt; ActiveRecord::Base

  def user_task(user)
    user.tasks.where(data_set_id: self.id).first
  end

end

class Task &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :data_set
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在数据集合(DataSet)列表页面，列出多个集合(DataSet)，用户可以选择其中一个参与任务(Task)。如果用户还没有参与其中的某个项目，显示“开始工作”，否则显示“继续工作”，页面部分代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;        &amp;lt;% @data_sets.each do |data_set| %&amp;gt;
        &amp;lt;div class=&amp;quot;col-sm-6 col-md-4&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;thumbnail&amp;quot;&amp;gt;
            &amp;lt;%= image_tag data_set.logo.url %&amp;gt;
            &amp;lt;div class=&amp;quot;caption&amp;quot;&amp;gt;
              &amp;lt;h3&amp;gt;&amp;lt;%= data_set.name %&amp;gt;&amp;lt;/h3&amp;gt;
              &amp;lt;p&amp;gt;&amp;lt;%= data_set.description %&amp;gt;&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;
                &amp;lt;% if data_set.user_task(current_user).present? %&amp;gt;
                  &amp;lt;%= link_to &amp;#39;继续工作&amp;#39;, workspace_data_set_path(data_set), class: &amp;#39;btn btn-primary&amp;#39; %&amp;gt;
                &amp;lt;% else %&amp;gt;
                  &amp;lt;%= link_to &amp;#39;开始工作&amp;#39;, choose_task_data_set_path(data_set), method: :post, class: &amp;#39;btn btn-primary&amp;#39; %&amp;gt;
                &amp;lt;% end %&amp;gt;
              &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DataSetsController中的部分代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;class DataSetsController &amp;lt; ApplicationController
  before_action :authenticate_user!
  before_action :set_data_set, only: [:show, :edit, :update, :destroy, :choose_task, :workspace, :mark_picture]

  # GET /data_sets
  # GET /data_sets.json
  def index
    @data_sets = DataSet.all
  end

  # POST /data_sets/1/choose_task
  def choose_task
    if current_user.tasks.where(data_set_id: @data_set.id).first.nil?
      current_user.tasks.build(data_set_id: @data_set.id).save
    end

    redirect_to workspace_data_set_path(@data_set)
  end

  # GET /data_sets/1/workspace
  def workspace   
    # ...
  end
end 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当初在设计这个页面上逻辑的时候，一开始以为直接用一个方法请求就搞定了,页面点击“开始工作”或者“继续工作”按钮，直接GET请求跳转到用户工作台链接/data&lt;em&gt;sets/{id}/workspace，在workspace action中加入额外的逻辑判断是否要创建用户的任务(Task)。我接着认真思考了一下，发现这样不妥。原因有是GET /data&lt;/em&gt;sets/{id}/workspace中的逻辑不纯粹， 与它的URL本身语义不符合。也不利于测试。&lt;/p&gt;

&lt;p&gt;那也许有人会说我将workspace这个action改成POST显示可以吗？答案也是不可以的，因为你点击按钮进入这个页面后，你如果刷新当前的workspace页面，浏览器会提示是否重复提交请求的提示，给用户的体验也不好。实质是这个请求不可cache。另外在其它页面地方也不能通过一般的a link的方式进入workspace页面，不可传播。&lt;/p&gt;

&lt;p&gt;现在我将这个逻辑分开写了 POST /data&lt;em&gt;sets/{id}/choose&lt;/em&gt;task 和 GET /data_sets/{id}/workspace 两个请求，代码逻辑是很合理的。用户可以随意刷新他的工作台，而不用担心刷新会改变什么数据。&lt;/p&gt;

&lt;p&gt;啰嗦了这么多，其实这是一个很小的问题，但是容易忽略。之前在一个公司维护一个项目，发现页面中做的一个商品多条件查询表单居然是用POST请求的。每次在浏览器中查询商品后，按F5刷新，总是提示是否重复提交请求，用户体验很不好。另外我还没有办法把我查询找到的商品结果页面发给我其他的朋友。&lt;/p&gt;

&lt;p&gt;现在我来总结一下http请求的GET和POST方法使用。&lt;/p&gt;

&lt;p&gt;首先如名词所示，GET是用来从服务器上请求指定的资源，请求携带的信息都是体现在URL参数上面，如/products?category=1&amp;amp;color=red。URL长度有限制。&lt;/p&gt;

&lt;p&gt;POST是向服务器中提交数据，请求携带的信息一般放在http请求的消息体中，上传的数据长度在服务器端可以限制。&lt;/p&gt;

&lt;p&gt;从这里应该可以明确一点：GET请求应该不会带来影响的，重复请求不会改动服务器上的资源，它只负责取数据。POST请求是想服务器提交数据，重复提交动作对服务器资源是有影响的。那么GET请求是可以被前端缓存的，而POST请求不行。&lt;/p&gt;

&lt;p&gt;在用户的浏览器中，GET请求的URL是可以被保存书签的，POST请求不行。GET请求的URL是有历史记录的，可以前进 / 后退 / 刷新。POST请求则不行。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2015 20:30:00 +0800</pubDate>
        <link>/development/2015/07/28/http-get-and-post/</link>
        <guid isPermaLink="true">/development/2015/07/28/http-get-and-post/</guid>
      </item>
    
      <item>
        <title>在QT5中使用JSON库json-c</title>
        <description>&lt;p&gt;首先需要安装json-c库:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install libjson-c-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在QT的项目中，修改.pro文件，加入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;CONFIG += link_pkgconfig
PKGCONFIG += json-c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;        #include &amp;lt;json/json.h&amp;gt;

        /*Creating a json object*/
        json_object * jobj = json_object_new_object();

        /*Creating a json string*/
        json_object *jstring = json_object_new_string(&amp;quot;Joys of Programming&amp;quot;);

        /*Creating a json integer*/
        json_object *jint = json_object_new_int(10);

        /*Creating a json boolean*/
        json_object *jboolean = json_object_new_boolean(1);

        /*Creating a json double*/
        json_object *jdouble = json_object_new_double(2.14);

        /*Creating a json array*/
        json_object *jarray = json_object_new_array();

        /*Creating json strings*/
        json_object *jstring1 = json_object_new_string(&amp;quot;c&amp;quot;);
        json_object *jstring2 = json_object_new_string(&amp;quot;c++&amp;quot;);
        json_object *jstring3 = json_object_new_string(&amp;quot;php&amp;quot;);

        /*Adding the above created json strings to the array*/
        json_object_array_add(jarray,jstring1);
        json_object_array_add(jarray,jstring2);
        json_object_array_add(jarray,jstring3);
        json_object_array_add(jarray,jstring4);

        /*Form the json object*/
        /*Each of these is like a key value pair*/
        json_object_object_add(jobj,&amp;quot;Site Name&amp;quot;, jstring);
        json_object_object_add(jobj,&amp;quot;Technical blog&amp;quot;, jboolean);
        json_object_object_add(jobj,&amp;quot;Average posts per day&amp;quot;, jdouble);
        json_object_object_add(jobj,&amp;quot;Number of posts&amp;quot;, jint);
        json_object_object_add(jobj,&amp;quot;Categories&amp;quot;, jarray);

        /*Now printing the json object*/
        printf (&amp;quot;The json object created: %sn&amp;quot;,json_object_to_json_string(jobj));    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序结果是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  The json object created: { &amp;quot;Site Name&amp;quot;: &amp;quot;Joys of Programming&amp;quot;, &amp;quot;Technical blog&amp;quot;: true, &amp;quot;Average posts per day&amp;quot;: 2.140000, &amp;quot;Number of posts&amp;quot;: 10, &amp;quot;Categories&amp;quot;: [ &amp;quot;c&amp;quot;, &amp;quot;c++&amp;quot;, &amp;quot;php&amp;quot; ] }n/            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 13 Jul 2015 12:30:00 +0800</pubDate>
        <link>/development/2015/07/13/use-json-in-qt5/</link>
        <guid isPermaLink="true">/development/2015/07/13/use-json-in-qt5/</guid>
      </item>
    
      <item>
        <title>我的开发感悟（2）</title>
        <description>&lt;p&gt;在调研某一项技术时，没有深入到其中之前，会认为它不适合自己的口味，或者认为它比较难以入门。但是某一天当你静下心来研究，一旦入门了，就会感叹：原来如此，我怎么没有早点了解它呢？&lt;/p&gt;

&lt;p&gt;最近在研究&lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone&lt;/a&gt;这个JS库时，再次有这个感受。Backbone真是一个小而美的前端MVC库，虽然不像AngularJS那样来的直接，但是Backbone层次逻辑清楚，虽然自己需要多写一些代码，但是一切都在掌握之中的感觉真不错，它适合有一定基础并希望可以自由度大一点的开发人员。&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jul 2015 20:30:00 +0800</pubDate>
        <link>/development/2015/07/01/my-dev-notes1/</link>
        <guid isPermaLink="true">/development/2015/07/01/my-dev-notes1/</guid>
      </item>
    
      <item>
        <title>在QT5中使用国际化语言</title>
        <description>&lt;p&gt;QT程序启动时加载Translator&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;QTranslator translator;
translator.load(&amp;quot;ntptu_&amp;quot; + QLocale::system().name(),
                      &amp;quot;:/translations&amp;quot;);
a.installTranslator(&amp;amp;translator);


QString message(tr(&amp;quot;voices directory did not exist in data directory %1!&amp;quot;));
message.arg(dir.absolutePath());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lupdate工具是解析程序代码中使用tr方法和ui文件中的字符串，生成ts文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;lupdate -verbose project.pro
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;linguist这个工具可以直接在程序界面上翻译代码和ui文件中的字符串。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;linguist project_zh_CN.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lrelease是将ts文件生成pm文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;lrelease -verbose project_zh_CN.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置环境变量进行测试&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;qichunren@qichunren-desktop:~/code/new-pis$ locale
LANG=zh_CN.UTF-8
LANGUAGE=en_US
LC_CTYPE=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_NUMERIC=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_TIME=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_COLLATE=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_MONETARY=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_MESSAGES=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_PAPER=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_NAME=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_ADDRESS=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_TELEPHONE=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_MEASUREMENT=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_IDENTIFICATION=&amp;quot;zh_CN.UTF-8&amp;quot;
LC_ALL=zh_CN.UTF-8
qichunren@qichunren-desktop:~/code/new-pis$ export LANGUAGE=zh_CN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 13 Apr 2015 18:42:00 +0800</pubDate>
        <link>/development/2015/04/13/qt-internationalization/</link>
        <guid isPermaLink="true">/development/2015/04/13/qt-internationalization/</guid>
      </item>
    
      <item>
        <title>C++中实现单例</title>
        <description>&lt;p&gt;data_package.h文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  #ifndef DATA_PACKAGE_H
  #define DATA_PACKAGE_H

  #include &amp;lt;QObject&amp;gt;

  class DataPackage : public QObject
  {
      Q_OBJECT
  public:          
      static DataPackage &amp;amp;instance();

  signals:

  public slots:

  private:
      explicit DataPackage(QObject *parent = 0);

  };

  #endif // DATA_PACKAGE_H
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;data_package.cpp文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  #include &amp;quot;data_package.h&amp;quot;
  #include &amp;lt;QDebug&amp;gt;

  DataPackage::DataPackage(QObject *parent) :
      QObject(parent)
  {
      qDebug() &amp;lt;&amp;lt; &amp;quot;init data package&amp;quot;;
  }

  DataPackage&amp;amp; DataPackage::instance()
  {
      static DataPackage _instance;
      return _instance;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  DataPackage::instance();
  DataPackage::instance();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连续调用两次instance方法，发现只会示例一次。搞定。&lt;/p&gt;

&lt;h2&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1008019/c-singleton-design-pattern&quot;&gt;C++ Singleton design pattern&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Jan 2015 10:43:00 +0800</pubDate>
        <link>/development/2015/01/13/c-plus-plus-single-instance-notes/</link>
        <guid isPermaLink="true">/development/2015/01/13/c-plus-plus-single-instance-notes/</guid>
      </item>
    
      <item>
        <title>Game resources note</title>
        <description>&lt;p&gt;Game replay video here: https://everyplay.com&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pixelprospector.com/the-big-list-of-game-design/&quot;&gt;The Big List Of Game Design&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Audio:&lt;/h2&gt;

&lt;p&gt;http://www.bfxr.net/ generate small music sound, such as &amp;lsquo;power up&amp;rsquo;, &amp;lsquo;coin collect&amp;rsquo;, &amp;lsquo;Attack&amp;rsquo;, &amp;lsquo;Explosion&amp;rsquo;&lt;/p&gt;

&lt;p&gt;http://www.flashkit.com/ sound resources.&lt;/p&gt;

&lt;h2&gt;Images&lt;/h2&gt;

&lt;p&gt;VOXEL Builder http://voxelbuilder.com/
2.5D model tool: http://www.angryoctopus.co.nz/?p=177
http://opengameart.org/&lt;/p&gt;

&lt;h3&gt;Tileset&lt;/h3&gt;

&lt;p&gt;https://vxresource.wordpress.com/category/resources/tilesets/
http://www.engine001.com/resources/tilesets.htm
http://opengameart.org/content/isometric-tiles&lt;/p&gt;

&lt;h2&gt;Threoy&lt;/h2&gt;

&lt;p&gt;http://www.lostgarden.com/
&lt;a href=&quot;http://gamemechanicexplorer.com/&quot;&gt;http://gamemechanicexplorer.com/&lt;/a&gt;里面基于Phaser引擎讲解了许多游戏中常用的设计算法，如角色行走，导弹路径，光，视野等。&lt;/p&gt;

&lt;h2&gt;Games&lt;/h2&gt;

&lt;p&gt;http://spryfox.com/our-games/&lt;/p&gt;

&lt;h3&gt;Voxel editors&lt;/h3&gt;

&lt;p&gt;https://bitbucket.org/volumesoffun/polyvox/wiki/Voxel%20editors&lt;/p&gt;

&lt;h2&gt;WebSites&lt;/h2&gt;

&lt;p&gt;http://www.gamasutra.com/
http://gamedevelopment.tutsplus.com/&lt;/p&gt;

&lt;p&gt;Create tile game tutuoal: http://www.tonypa.pri.ee/tbw/start.html&lt;/p&gt;

&lt;p&gt;Isometric Tiles Introduction: http://flarerpg.org/tutorials/isometric_intro/&lt;/p&gt;

&lt;p&gt;Character Generator: http://gaurav.munjal.us/Universal-LPC-Spritesheet-Character-Generator/&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Oct 2014 17:05:00 +0800</pubDate>
        <link>/development/2014/10/23/game-resources-note/</link>
        <guid isPermaLink="true">/development/2014/10/23/game-resources-note/</guid>
      </item>
    
      <item>
        <title>欧洲旅行记录</title>
        <description>&lt;p&gt;2014年9月21到9月30号跟着公司团到欧洲旅行了一圈，这是我的第一次出国。&lt;/p&gt;

&lt;p&gt;这次欧洲行游历了四个国家：德国，荷兰，比利时和法国。去过的欧洲城市有柏林，科隆，阿姆斯特丹，布鲁塞尔，巴黎。&lt;/p&gt;

&lt;p&gt;购物方面：物价比中国国内便宜。买许多东西比国内便宜，如红酒，化妆品，保健品，手表，奶粉。
交通：在欧洲我经过的几个城市，柏林的交通算比较好，巴黎人口密度大，车也多。然后大家都很遵守交通规则，我没有看到有闯红灯的现象，路上机动车随便变道的情况也非常少，几乎没有鸣喇叭的现象，骑自行车的很多，没有人骑电瓶车，要么就是骑摩托车。&lt;/p&gt;

&lt;p&gt;欧洲是一个值得细细感受的地方，如果我下次再来的话，一定会选一个地方，好好呆上一段时间，仔细感受其中的文化底蕴和人化风俗。&lt;/p&gt;

&lt;p&gt;最近在看一本书叫《欧洲极简史》，希望能多多了解一下欧洲这片土地。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Oct 2014 12:05:00 +0800</pubDate>
        <link>/life/2014/10/04/europe-travel/</link>
        <guid isPermaLink="true">/life/2014/10/04/europe-travel/</guid>
      </item>
    
      <item>
        <title>将Shadownsocks代理转换成http proxy类型</title>
        <description>&lt;p&gt;　
主要就是安装 &lt;em&gt;polipo&lt;/em&gt; 工具。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;brew install polipo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就是启动polipo程序开机自动启动。&lt;/p&gt;

&lt;p&gt;首先要修改自动启动的配置文件 &lt;em&gt;/usr/local/opt/polipo/homebrew.mxcl.polipo.plist&lt;/em&gt;，需要给polipo命令加上命令行参数 &lt;strong&gt;socksParentProxy=localhost:1080&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
  &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;homebrew.mxcl.polipo&amp;lt;/string&amp;gt;
      &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
      &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
      &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
      &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;/usr/local/opt/polipo/bin/polipo&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;socksParentProxy=localhost:1080&amp;lt;/string&amp;gt;
      &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后执行以下命令，搞定收工。
&lt;code&gt;
ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;polipo进程默认监听8123端口，在命令行使用export http_proxy=localhost:8123 就可以使用代理了。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2014 17:04:00 +0800</pubDate>
        <link>/tool/2014/07/15/Convert-shadowsocks-into-http-proxy-on-mac/</link>
        <guid isPermaLink="true">/tool/2014/07/15/Convert-shadowsocks-into-http-proxy-on-mac/</guid>
      </item>
    
      <item>
        <title>《写给大家看的设计书》笔记</title>
        <description>&lt;p&gt;最近又将《写给大家看的设计书》这本书翻阅了一遍，又有了一些新的体会，感觉非常棒。真的非常佩服和感谢作者能够将关于设计的东西通过如此简明的理论给表达出来，让普通的人可以明白和感受设计的奥妙窍门。&lt;/p&gt;

&lt;p&gt;我平时主要是作WEB开发方面的工作，在网上看到许多优秀的网页设计排版，感觉非常舒服。我之前一直在思考为什么我就不能设计出来这样类型的网页，只能从形式上去模仿，没有找到设计的精髓，感觉没有头绪。自从看到了《写给大家看的设计书》这本书后，我一口气把它读完了，感觉非常满足。它指点了我，让我从迷惘中走出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img3.douban.com/lpic/s23486434.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;

&lt;p&gt;再次将书中的一些段落摘抄下来感受一下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;优秀的设计就这么容易&lt;/p&gt;

&lt;p&gt;1 学习4大基本原则，它们比你想象得要简单。&lt;/p&gt;

&lt;p&gt;2 认识到自己没有使用这些原则。形诸文字 &amp;mdash;- 陈述问题。&lt;/p&gt;

&lt;p&gt;3 应用基本原则。结果将使你大吃一惊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;书中提到的4大基本原则是对比，重复，对齐，亲密性。分别在每一章节中讲述了其中的运用方法，并有实例配套。&lt;/p&gt;

&lt;p&gt;最后我想知道的是，在生活中有没有和这本书中类似的看似常人不易掌握，但是经过高人点拨和总结，然后一下子豁然明朗的技能呢？&lt;/p&gt;

&lt;h2&gt;相关链接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://book.douban.com/subject/3323633/&quot;&gt;《写给大家看的设计书》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 16 May 2014 00:57:00 +0800</pubDate>
        <link>/tool/2014/05/16/The-Non-Designers-Design-Book-Note/</link>
        <guid isPermaLink="true">/tool/2014/05/16/The-Non-Designers-Design-Book-Note/</guid>
      </item>
    
  </channel>
</rss>