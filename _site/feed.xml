<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蕲春人的博客</title>
    <description>记录我的生活。</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>将Shadownsocks代理转换成http proxy类型</title>
        <description>&lt;p&gt;　
主要就是安装 &lt;em&gt;polipo&lt;/em&gt; 工具。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;brew install polipo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就是启动polipo程序开机自动启动。&lt;/p&gt;

&lt;p&gt;首先要修改自动启动的配置文件 &lt;em&gt;/usr/local/opt/polipo/homebrew.mxcl.polipo.plist&lt;/em&gt;，需要给polipo命令加上命令行参数 &lt;strong&gt;socksParentProxy=localhost:1080&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
  &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;homebrew.mxcl.polipo&amp;lt;/string&amp;gt;
      &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
      &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
      &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
      &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;/usr/local/opt/polipo/bin/polipo&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;socksParentProxy=localhost:1080&amp;lt;/string&amp;gt;
      &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后执行以下命令，搞定收工。
&lt;code&gt;
ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2014 17:04:00 +0800</pubDate>
        <link>/tool/2014/07/15/Convert-shadowsocks-into-http-proxy-on-mac/</link>
        <guid isPermaLink="true">/tool/2014/07/15/Convert-shadowsocks-into-http-proxy-on-mac/</guid>
      </item>
    
      <item>
        <title>PostgreSQL 数据库中的高级数据类型</title>
        <description>&lt;p&gt;未完成 &amp;hellip;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jul 2014 17:04:00 +0800</pubDate>
        <link>/tool/2014/07/14/Anvanced-data-types-in-postgresql-for-rails-developers/</link>
        <guid isPermaLink="true">/tool/2014/07/14/Anvanced-data-types-in-postgresql-for-rails-developers/</guid>
      </item>
    
      <item>
        <title>《写给大家看的设计书》笔记</title>
        <description>&lt;p&gt;最近又将《写给大家看的设计书》这本书翻阅了一遍，又有了一些新的体会，感觉非常棒。真的非常佩服和感谢作者能够将关于设计的东西通过如此简明的理论给表达出来，让普通的人可以明白和感受设计的奥妙窍门。&lt;/p&gt;

&lt;p&gt;我平时主要是作WEB开发方面的工作，在网上看到许多优秀的网页设计排版，感觉非常舒服。我之前一直在思考为什么我就不能设计出来这样类型的网页，只能从形式上去模仿，没有找到设计的精髓，感觉没有头绪。自从看到了《写给大家看的设计书》这本书后，我一口气把它读完了，感觉非常满足。它指点了我，让我从迷惘中走出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img3.douban.com/lpic/s23486434.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;

&lt;p&gt;再次将书中的一些段落摘抄下来感受一下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;优秀的设计就这么容易&lt;/p&gt;

&lt;p&gt;1 学习4大基本原则，它们比你想象得要简单。&lt;/p&gt;

&lt;p&gt;2 认识到自己没有使用这些原则。形诸文字 &amp;mdash;- 陈述问题。&lt;/p&gt;

&lt;p&gt;3 应用基本原则。结果将使你大吃一惊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;书中提到的4大基本原则是对比，重复，对齐，亲密性。分别在每一章节中讲述了其中的运用方法，并有实例配套。&lt;/p&gt;

&lt;p&gt;最后我想知道的是，在生活中有没有和这本书中类似的看似常人不易掌握，但是经过高人点拨和总结，然后一下子豁然明朗的技能呢？&lt;/p&gt;

&lt;h2&gt;相关链接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://book.douban.com/subject/3323633/&quot;&gt;《写给大家看的设计书》&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 16 May 2014 00:57:00 +0800</pubDate>
        <link>/tool/2014/05/16/The-Non-Designers-Design-Book-Note/</link>
        <guid isPermaLink="true">/tool/2014/05/16/The-Non-Designers-Design-Book-Note/</guid>
      </item>
    
      <item>
        <title>我的2013年总结</title>
        <description>&lt;p&gt;2013年已经过去了，感觉这一年过得太快了。工作很忙碌，我又是一个严重拖延症患者，难得今天抽出时间写这个年终总结。我认为这是很有必要的，总结经验，不断进步。&lt;/p&gt;

&lt;p&gt;2013年这一年都在忙，从去年7年月份开始的一个工程项目，这不是一个专门的软件项目，它是从硬件设计到应用软件开发一整套的项目，实现了网络语音对讲、广播、媒体播放的功能，可用于银行、学校、监狱等场所。我在这个项目中主要负责系统的信息管理配置，包括设备信息管理、频道管理、媒体库管理等功能。&lt;/p&gt;

&lt;p&gt;到5月末，这个项目看似完成了，然后我们在上海这边的团队去广州那边的合作伙伴公司，与他们负责硬件的团队一起配合，完成系统的最后部分。没有想到这一去就是整整半年。在14年1月份的时候还去了山西的某监狱中出差，负责系统的软件安装配置。这整个过程就不在这里细说了，反正感觉不好受，以后我再也不想经历这种状态下的工作经历。现在我想总结一下的想法。&lt;/p&gt;

&lt;h3&gt;阶段工作要做好&lt;/h3&gt;

&lt;p&gt;一个比较正式的软件工程项目大致可以分为五个阶段：需求分析、系统设计、程序开发、系统测试、部署安装。这五个阶段都是至关重要的，任何一个阶段的工作没有做好的话，都会导致问题发生。&lt;/p&gt;

&lt;h3&gt;沟通与合作&lt;/h3&gt;

&lt;p&gt;沟通怎么强调也不为过。在一个团队中，积极沟通，可以让团队人员合作得愉快。在现实生活中，个体之间由于差异化，加上程序员一般有些自傲的特性，交流起来得需要一些方法，有一个段子是这样的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你也不能对一个程序员说：你的代码有bug。他的第一反应是：
1，你的环境有问题吧；
2，傻逼你会用吗。
如果你委婉地说：你这个程序和预期的有点不一致，你看看是不是我的使用方法有问题。
他本能地会想：操，是不是出bug了！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;做减法&lt;/h3&gt;

&lt;p&gt;做减法是敢于去掉不必须或者目前不那么重要的工作，把精力和资源集中到最重要的目标上，高质量地实现，尽早发布，让人看到。在产品的需求分析方面，广州公司这边是希望做出来的产品功能全面，可以适合于各种场合。他想到的功能，和从竞争对手产品看到的功能，都向需求列表中添加。我知道他们是为了让自己的产品强大，但是我人个是希望是相关人员站在公司战略发展的角度来规划整个产品线，将产品分阶段版本发布，这样可以保证每一版产品都稳定实用。当初的iPhone也不是一下子就完美无缺的。我希望是每一个发布版的产品都是于用户实用的，而不是功能点多，却很多功能都有问题。每一版中多提出一个功能，意味着开发要多做事情，意味着测试要多做事情。我们团队一共才5个人。&lt;/p&gt;

&lt;p&gt;另外做减法，我在开发过程也有体会。Ruby写代码很直观，加上经常出来一些新技术工具Gem包之类的，我就尝试它们，觉得不错的话就应用到我们的项目中，因为写代码很容易嘛，花不了多少时间的。然后在以后的某个时候，随着产品需求的明确化，发现其实之前我写的某些代码是多余的。多写了代码，就多了一维护，就多了一个入口。项目中多加一个Gem，以后如果升级项目时，就多了一份检查包兼容检查的工作。&lt;/p&gt;

&lt;h3&gt;站在用户的角度来思考问题&lt;/h3&gt;

&lt;p&gt;我的主要经验是在WEB开发上面，感觉设计用户界面是一个比较重要的工作。做出的产品，最终在用户方面，他的使用感受是与产品相关的。&lt;/p&gt;

&lt;p&gt;团队中没有产品经理方面的角色，项目前期也没有很具体的界面方面的文档，前期系统是直接借用网上的一个后台模板，然后根据项目的具体情况改进的。在山西那边出差时，在监狱中安装系统，进行系统配置管理时，我发现我做出的界面操作起来很难受，300多台机器呀，应该有的批量操作没有实际用途，而在现场需要的某些批量操作功能却没有。那些时候真是感觉很沮丧。这个促使我在设计界面时，一定要根据产品的实际使用场合来思考构思界面的设计，思考怎么样直观操作，高效操作。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;收获与希望&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在广州呆了半年，也算是在”去过的地方中”中加一个地点，感受了这个城市。&lt;/li&gt;
&lt;li&gt;了解了一个产品诞生的过程，大概知道了硬件是怎么样设计出来的。&lt;/li&gt;
&lt;li&gt;加强沟通能力&lt;/li&gt;
&lt;li&gt;学习C/C++等比较底层一点的知识，多了解一下与电子方面有关的知识。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Jan 2014 22:43:00 +0800</pubDate>
        <link>/tool/2014/01/24/my-2013/</link>
        <guid isPermaLink="true">/tool/2014/01/24/my-2013/</guid>
      </item>
    
      <item>
        <title>开始使用vagrant</title>
        <description>&lt;h1&gt;Vagrant&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; 是一个虚拟机配置管理工具。&lt;/p&gt;

&lt;p&gt;简单来说，Vagrant 可以让你用一个文本文件 Vagrantfile 描述一个虚拟机环境，然后根据你的描述启动这样的一台虚拟机，同时将 Vagrantfile 所在的目录的所有内容，和虚拟机中的 /vagrant 这个目录自动实时同步。入门文档在&lt;a href=&quot;http://docs.vagrantup.com/v2/getting-started/index.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;Get started&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;下载vagrant, 从&lt;a href=&quot;http://downloads.vagrantup.com/&quot;&gt;http://downloads.vagrantup.com/&lt;/a&gt;页面中，根据自己的操作系统平台选择相应的版本下载，我在写这个文档的时候它的最新版本是&lt;em&gt;v1.3.1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;安装完成后，在命令行终端中会有一个vagrant命令。&lt;/li&gt;
&lt;li&gt;进行自己平时的工作目录，执行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;git clone git@github.com:qichunren/luna-vagrant.git
cd luna-vagrant
vagrant box add precise64 http://files.vagrantup.com/precise64.box # 下载box，它是一个VirtualBox虚拟机导出的文件，版本是Ubuntu 12.04 LTS 64位
vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自己的工作目录（就是luna-vagrant项目的上一层项目）是实时与虚拟机中的/code目录保持同步。
luna-vagrant目录是实时与虚拟机中的/vagrant目录保持同步。&lt;/p&gt;

&lt;h2&gt;常用命令&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;vagrant up  # 启动虚拟机
vagrant ssh # ssh登录机器
vagrant halt # 关闭虚拟机
vagrant destory # 删除虚拟机
vagrant status # 显示虚拟机状态
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;怎么样添加box?
vagrant box add precise64 http://files.vagrantup.com/precise64.box&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 22 Sep 2013 20:43:00 +0800</pubDate>
        <link>/tool/2013/09/22/start-use-vagrant/</link>
        <guid isPermaLink="true">/tool/2013/09/22/start-use-vagrant/</guid>
      </item>
    
      <item>
        <title>最近的境况</title>
        <description>&lt;p&gt;好久没有写点东西了。平时虽然脑中想到的东西蛮多的，但是要把它们完整地通过文字表达出来居然有些困难。这是我不想看到的结果。我需要克服各种困难，提高自己的执行效率，提高自己的表达能力。&lt;/p&gt;

&lt;p&gt;我在最近的公司项目中遇到了一些困难，导致工作进展缓慢，压力很大。项目的需求在一个多月之前发生了较多的变化，导致之前的软件设计有许多变化。基于演变后的需求进行的结构逻辑设计方面，在我看来，感觉有些混乱，代码写得不顺畅。然后产品客户方面的界面需求与我们现有的产品设计之间在理解上还有不少差距。项目上线发布时间越来越近，如何在产品发布之前，做出一个完美的产品，真的挑战蛮大的。&lt;/p&gt;

&lt;p&gt;我现在要做的事情就是克服困难，积极沟通，发现问题，及时解决问题。&lt;/p&gt;

&lt;p&gt;加油！&lt;/p&gt;
</description>
        <pubDate>Wed, 22 May 2013 00:03:00 +0800</pubDate>
        <link>/life/2013/05/22/recently-my-thought/</link>
        <guid isPermaLink="true">/life/2013/05/22/recently-my-thought/</guid>
      </item>
    
      <item>
        <title>Use postgres database on Mac Lion</title>
        <description>&lt;h2&gt;Mac平台&lt;/h2&gt;

&lt;h3&gt;brew info postgresql&lt;/h3&gt;

&lt;pre&gt;
qichunrens-MacBook-Pro:luna-client1 qichunren$ brew info postgresql
postgresql: stable 9.2.1
http://www.postgresql.org/
Depends on: readline, ossp-uuid
Not installed
https://github.com/mxcl/homebrew/commits/master/Library/Formula/postgresql.rb
==&gt; Options
--no-perl
    Build without Perl support
--enable-dtrace
    Build with DTrace support
--32-bit
    Build 32-bit only
--no-python
    Build without Python support
--without-ossp-uuid
    Build without OSSP uuid
==&gt; Caveats
# Build Notes

If builds of PostgreSQL 9 are failing and you have version 8.x installed,
you may need to remove the previous version first. See:
  https://github.com/mxcl/homebrew/issues/issue/2510

To build plpython against a specific Python, set PYTHON prior to brewing:
  PYTHON=/usr/local/bin/python  brew install postgresql
See:
  http://www.postgresql.org/docs/9.2/static/install-procedure.html

# Create/Upgrade a Database

If this is your first install, create a database with:
  initdb /usr/local/var/postgres -E utf8

To migrate existing data from a previous major version (pre-9.2) of PostgreSQL, see:
  http://www.postgresql.org/docs/9.2/static/upgrading.html

# Start/Stop PostgreSQL

If this is your first install, automatically load on login with:
  mkdir -p ~/Library/LaunchAgents
  cp /usr/local/Cellar/postgresql/9.2.1/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
  launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

If this is an upgrade and you already have the homebrew.mxcl.postgresql.plist loaded:
  launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
  cp /usr/local/Cellar/postgresql/9.2.1/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
  launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

Or start manually with:
  pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start

And stop with:
  pg_ctl -D /usr/local/var/postgres stop -s -m fast

# Loading Extensions

By default, Homebrew builds all available Contrib extensions.  To see a list of all
available extensions, from the psql command line, run:
  SELECT * FROM pg_available_extensions;

To load any of the extension names, navigate to the desired database and run:
  CREATE EXTENSION [extension name];

For instance, to load the tablefunc extension in the current database, run:
  CREATE EXTENSION tablefunc;

For more information on the CREATE EXTENSION command, see:
  http://www.postgresql.org/docs/9.2/static/sql-createextension.html
For more information on extensions, see:
  http://www.postgresql.org/docs/9.2/static/contrib.html

# Other

Some machines may require provisioning of shared memory:
  http://www.postgresql.org/docs/9.2/static/kernel-resources.html#SYSVIPC

To install postgresql (and ossp-uuid) in 32-bit mode:
   brew install postgresql --32-bit

If you want to install the postgres gem, including ARCHFLAGS is recommended:
    env ARCHFLAGS=&quot;-arch x86_64&quot; gem install pg

&lt;/pre&gt;

&lt;h3&gt;brew install postgresql&lt;/h3&gt;

&lt;pre&gt;
qichunrens-MacBook-Pro:luna-client1 qichunren$ brew install postgresql
==&gt; Installing postgresql dependency: readline
==&gt; Downloading http://ftpmirror.gnu.org/readline/readline-6.2.tar.gz
######################################################################## 100.0%
==&gt; Patching
patching file callback.c
patching file input.c
patching file patchlevel
patching file support/shobj-conf
patching file vi_mode.c
==&gt; ./configure --prefix=/usr/local/Cellar/readline/6.2.4 --mandir=/usr/local/Cellar/readline/6.2.4/share/man --infodir=/usr/local/Cellar/readline/6.2.4/share/info --enable-multibyt
==&gt; make install
==&gt; Caveats
This formula is keg-only: so it was not symlinked into /usr/local.

OS X provides the BSD libedit library, which shadows libreadline.
In order to prevent conflicts when programs look for libreadline we are
defaulting this GNU Readline installation to keg-only.

Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you'll need to add to your
build variables:

    LDFLAGS:  -L/usr/local/opt/readline/lib
    CPPFLAGS: -I/usr/local/opt/readline/include

==&gt; Summary
/usr/local/Cellar/readline/6.2.4: 31 files, 1.6M, built in 13 seconds
==&gt; Installing postgresql dependency: ossp-uuid
==&gt; Downloading ftp://ftp.ossp.org/pkg/lib/uuid/uuid-1.6.2.tar.gz
######################################################################## 100.0%
######################################################################## 100.0%==&gt; ./configure --prefix=/usr/local/Cellar/ossp-uuid/1.6.2 --without-perl --without-php --without-pgsql
==&gt; make
==&gt; make install
==&gt; Caveats
This formula is keg-only: so it was not symlinked into /usr/local.

OS X provides a uuid.h which conflicts with ossp-uuid's header.

Generally there are no consequences of this for you. If you build your
own software and it requires this formula, you'll need to add to your
build variables:

    LDFLAGS:  -L/usr/local/opt/ossp-uuid/lib
    CPPFLAGS: -I/usr/local/opt/ossp-uuid/include

==&gt; Summary
/usr/local/Cellar/ossp-uuid/1.6.2: 15 files, 232K, built in 28 seconds
==&gt; Installing postgresql
==&gt; Downloading http://ftp.postgresql.org/pub/source/v9.2.1/postgresql-9.2.1.tar.bz2
######################################################################## 100.0%
==&gt; Patching
patching file src/pl/plpython/Makefile
patching file contrib/uuid-ossp/uuid-ossp.c
==&gt; ./configure --prefix=/usr/local/Cellar/postgresql/9.2.1 --datadir=/usr/local/Cellar/postgresql/9.2.1/share/postgresql --docdir=/usr/local/Cellar/postgresql/9.2.1/share/doc/postg
==&gt; make install-world
==&gt; Caveats
# Build Notes

&lt;/pre&gt;

&lt;h3&gt;initdb /usr/local/var/postgres -E utf8&lt;/h3&gt;

&lt;pre&gt;
qichunrens-MacBook-Pro:luna-client1 qichunren$ initdb /usr/local/var/postgres -E utf8
The files belonging to this database system will be owned by user &quot;qichunren&quot;.
This user must also own the server process.

The database cluster will be initialized with locale &quot;en_US.UTF-8&quot;.
The default text search configuration will be set to &quot;english&quot;.

creating directory /usr/local/var/postgres ... ok
creating subdirectories ... ok
selecting default max_connections ... 20
selecting default shared_buffers ... 1600kB
creating configuration files ... ok
creating template1 database in /usr/local/var/postgres/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling &quot;trust&quot; authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    postgres -D /usr/local/var/postgres
or
    pg_ctl -D /usr/local/var/postgres -l logfile start


&lt;/pre&gt;

&lt;h3&gt;相关的常用命令&lt;/h3&gt;

&lt;h4&gt;createuser&lt;/h4&gt;

&lt;pre&gt;
qichunrens-MacBook-Pro:luna-server qichunren$ createuser --help
createuser creates a new PostgreSQL role.

Usage:
  createuser [OPTION]... [ROLENAME]

Options:
  -c, --connection-limit=N  connection limit for role (default: no limit)
  -d, --createdb            role can create new databases
  -D, --no-createdb         role cannot create databases (default)
  -e, --echo                show the commands being sent to the server
  -E, --encrypted           encrypt stored password
  -i, --inherit             role inherits privileges of roles it is a
                            member of (default)
  -I, --no-inherit          role does not inherit privileges
  -l, --login               role can login (default)
  -L, --no-login            role cannot login
  -N, --unencrypted         do not encrypt stored password
  -P, --pwprompt            assign a password to new role
  -r, --createrole          role can create new roles
  -R, --no-createrole       role cannot create roles (default)
  -s, --superuser           role will be superuser
  -S, --no-superuser        role will not be superuser (default)
  -V, --version             output version information, then exit
  --interactive             prompt for missing role name and attributes rather
                            than using defaults
  --replication             role can initiate replication
  --no-replication          role cannot initiate replication
  -?, --help                show this help, then exit

Connection options:
  -h, --host=HOSTNAME       database server host or socket directory
  -p, --port=PORT           database server port
  -U, --username=USERNAME   user name to connect as (not the one to create)
  -w, --no-password         never prompt for password
  -W, --password            force password prompt

Report bugs to &lt;pgsql-bugs@postgresql.org&gt;.
&lt;/pre&gt;

&lt;h4&gt;createdb&lt;/h4&gt;

&lt;pre&gt;
qichunrens-MacBook-Pro:luna-server qichunren$ createdb --help
createdb creates a PostgreSQL database.

Usage:
  createdb [OPTION]... [DBNAME] [DESCRIPTION]

Options:
  -D, --tablespace=TABLESPACE  default tablespace for the database
  -e, --echo                   show the commands being sent to the server
  -E, --encoding=ENCODING      encoding for the database
  -l, --locale=LOCALE          locale settings for the database
      --lc-collate=LOCALE      LC_COLLATE setting for the database
      --lc-ctype=LOCALE        LC_CTYPE setting for the database
  -O, --owner=OWNER            database user to own the new database
  -T, --template=TEMPLATE      template database to copy
  -V, --version                output version information, then exit
  -?, --help                   show this help, then exit

Connection options:
  -h, --host=HOSTNAME          database server host or socket directory
  -p, --port=PORT              database server port
  -U, --username=USERNAME      user name to connect as
  -w, --no-password            never prompt for password
  -W, --password               force password prompt
  --maintenance-db=DBNAME      alternate maintenance database

By default, a database with the same name as the current user is created.

Report bugs to &lt;pgsql-bugs@postgresql.org&gt;.

---------
pg_ctl -D /usr/local/var/postgres -l logfile start
createuser luna
createdb -O luna -E utf8 luna_production

psql -U luna luna_production
luna_production=&gt; select * from users;
luna_production=&gt; ALTER USER luna WITH PASSWORD ‘whateverpasswordyouwant’;
&lt;/pre&gt;

&lt;h2&gt;Ubuntu平台&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get -y install  postgresql libpq-dev&lt;/code&gt; 安装完成以后，我们需要更改postgres用户的密码，否则我们就没法使用这个数据库服务器。以postgres这个系统用户的身份运行psql命令，在终端中输入如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;sudo su postgres -c psql template1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候会出现新的提示符，输入下面两个命令，用新密码替换 &amp;lt;&lt;strong&gt;&lt;em&gt;password&lt;/em&gt;&lt;/strong&gt;&amp;gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;ALTER USER postgres WITH PASSWORD &amp;#39;&amp;lt;***password***&amp;gt;&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;

sudo -u postgres psql -c &quot;create user qichunren with password 'qichunren';&quot;
sudo -u postgres psql -c &quot;CREATE DATABASE qichunren_production WITH OWNER qichunren ENCODING 'UTF8';&quot;
# sudo -u postgres psql -c &quot;DROP DATABASE qichunren_production;&quot;
&lt;/pre&gt;

&lt;h3&gt;设置数据库编码&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;psql (9.0.3)
Type &amp;quot;help&amp;quot; for help.

postgres=# update pg_database set datallowconn = TRUE where datname = &amp;#39;template0&amp;#39;;
UPDATE 1
postgres=# \c template0
You are now connected to database &amp;quot;template0&amp;quot;.
template0=# update pg_database set datistemplate = FALSE where datname = &amp;#39;template1&amp;#39;;
UPDATE 1
template0=# drop database template1;
DROP DATABASE
template0=# create database template1 with template = template0 encoding = &amp;#39;UTF8&amp;#39; LC_CTYPE = &amp;#39;en_US.utf8&amp;#39; LC_COLLATE = &amp;#39;en_US.utf8&amp;#39;;
CREATE DATABASE
template0=# update pg_database set datistemplate = TRUE where datname = &amp;#39;template1&amp;#39;;
UPDATE 1
template0=# \c template1
You are now connected to database &amp;quot;template1&amp;quot;.
template1=# update pg_database set datallowconn = FALSE where datname = &amp;#39;template0&amp;#39;;
UPDATE 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 27 Nov 2012 10:52:00 +0800</pubDate>
        <link>/database/2012/11/27/start-use-postgresql/</link>
        <guid isPermaLink="true">/database/2012/11/27/start-use-postgresql/</guid>
      </item>
    
      <item>
        <title>Ruby China Chrome浏览器插件</title>
        <description>&lt;p&gt;前几天，我花了几天业余时间制作了Ruby China社区网站的Chrome浏览器插件，通过这个插件可以：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不用前往Ruby China网站去浏览主题帖子，直接点击插件图标查看主题。&lt;/li&gt;
&lt;li&gt;显示个人未读消息提醒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，我发现Chrome浏览器的插件开发非常简单，自由度很大，根据它的开发规范，可以非常容易实现扩展开发。在我了解了这一点之后，我更加喜欢Chrome浏览器了。&lt;/p&gt;

&lt;p&gt;这个Chrome浏览器插件项目是开源的，代码在&lt;a href=&quot;https://github.com/qichunren/ruby-china-chrome&quot;&gt;https://github.com/qichunren/ruby-china-chrome&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jun 2012 14:56:00 +0800</pubDate>
        <link>/web/2012/06/18/i-build-ruby-china-chrome-extension/</link>
        <guid isPermaLink="true">/web/2012/06/18/i-build-ruby-china-chrome-extension/</guid>
      </item>
    
      <item>
        <title>使用SSH代理来访访问远程mysql机器</title>
        <description>&lt;p&gt;默认安装的mysql的Linux机器基于安全的原因，一般不支持mysql的远程连接访问。有几种方法可以修改配置来让mysql服务器支持远程连接。但是通过ssh的代理功能，可以不用修改服务器配置，来支持从远程连接mysql服务器。&lt;/p&gt;

&lt;p&gt;在本地通过ssh连接远程的mysql所在的服务器&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;ssh -L 1036:localhost:3306 root@xxx.xx.xx.xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就将远程的mysql主机代理到本地了，端口是1036。 &lt;a href=&quot;http://zh.wikipedia.org/zh/SSH&quot;&gt;SSH&lt;/a&gt;太强大了&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jun 2012 17:31:00 +0800</pubDate>
        <link>/linux/2012/06/04/use-ssh-proxy-port-trick/</link>
        <guid isPermaLink="true">/linux/2012/06/04/use-ssh-proxy-port-trick/</guid>
      </item>
    
      <item>
        <title>Fixed a problem with creating texture background in cocos2d</title>
        <description>&lt;p&gt;我尝试在cocos2d游戏中使用小图片重复平铺的方式来创建游戏背景时, 总是遇到这个问题，报错如下: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Terminating app due to uncaught exception &amp;#39;NSInternalInconsistencyException&amp;#39;, reason: &amp;#39;GL_CLAMP_TO_EDGE should be used in NPOT dimensions&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我的代码是这样的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;CCSprite *wall = [CCSprite spriteWithFile:@&amp;quot;pattern1.png&amp;quot; rect:CGRectMake(0, 0, 320, 480)];
wall.anchorPoint = ccp(0,0);
[self addChild:wall z:-1 tag:111];
ccTexParams params = {GL_LINEAR, GL_LINEAR, GL_REPEAT, GL_REPEAT};
//ccTexParams params = {GL_LINEAR,GL_LINEAR,GL_CLAMP_TO_EDGE, GL_CLAMP_TO_EDGE};
[wall.texture setTexParameters:&amp;amp;params];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我运行cocos2d项目的测试例子, 却发现它的例子是工作正常的, 百思不得其解啊. 然后我看到它代码的注释中写着:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;// The .png image MUST be power of 2 in order to create a continue effect.
// eg: 32x64, 512x128, 256x1024, 64x64, etc..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我想可能是我的图片尺寸不符合规格，检查了一下，果然发现纹理图片的不是2的次方的正方形。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;总结，使用小图片重复平铺来创建背景纹理图片的小图片尺寸必须设置成2的n次方的正方形大小。&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jun 2012 22:01:00 +0800</pubDate>
        <link>/ios/cocos2d/game-dev/2012/06/03/fixed-a-problem-with-creating-texture-background-in-cocos2d/</link>
        <guid isPermaLink="true">/ios/cocos2d/game-dev/2012/06/03/fixed-a-problem-with-creating-texture-background-in-cocos2d/</guid>
      </item>
    
  </channel>
</rss>