<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | 蕲春人的博客]]></title>
  <link href="http://qichunren.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://qichunren.github.io/"/>
  <updated>2013-05-22T00:32:13+08:00</updated>
  <id>http://qichunren.github.io/</id>
  <author>
    <name><![CDATA[qichunren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create custom tags in Smarty 3]]></title>
    <link href="http://qichunren.github.io/blog/2012-02-26-create-custom-tags-in-smarty/"/>
    <updated>2012-02-26T14:21:00+08:00</updated>
    <id>http://qichunren.github.io/blog/create-custom-tags-in-smarty</id>
    <content type="html"><![CDATA[<p>接着上一篇，还是来说说PHP模板引擎Smarty。PHP的众多CMS框架，如DEDE CMS，对于前端展示都是有一套自己开发的标签，用于显示管理后台维护的数据。在DEDECMS中，如下的代码</p>

<p>```</p>

<h2>最近新闻</h2>


<ul>
    {dede:arclist typeid='1' row='10'}
    <li>[field:textlink/]</li>
    {/dede:arclist}
</ul>


<p>```</p>

<p>就可以显示最近type id为1的10条新闻。在Smarty中创建属于自己的标签是很容易的，我之前在网络上搜索的关于创建smarty标签的内容大多数都是基于Smarty2的，我基于Smarty3中的plugins目录的代码了解到在Smarty3中创建自定义标签更为简单直观。</p>

<p>在smarty程序包的plugins目录中，可以看到有block \ function \ modifier 等几种前缀的php文件。像block前缀的php文件可以创建闭合的标签，就如上文提到的那个dede cms新闻标签的例子。现在我正是要创建这样类型的标签。</p>

<p>我结合CodeIgniter来说明，我现在创建一个用户列表的标签，可以显示最近注册的用户。
在smarty的plugins目录中创建的文件会自动被smarty加载而识别的，文件名和其中的function 名称需要特定的约定好的格式。
我现在想创建一个users标签,还有一个limit参数，用来显示取多少条数据</p>

<p>```
用户列表：</p>

<ul>
    <{users limit='3'}>
        <li><{$user->login}></li>
    <{/users}>
</ul>


<p>```</p>

<p>那么文件名就应该指定为block.users.php，然后function应该命名为smarty_block_users：</p>

<p>{% codeblock lang:php %}
&lt;?php
function smarty_block_users($params, $content, $smarty, &amp;$repeat){</p>

<pre><code>if (empty($content)){
    if (empty($params['limit'])) {
        $limit = 10;
    } else {
        $limit = $params['limit'];
    }
    $CI =&amp; get_instance();
    $GLOBALS['users'] = $CI-&gt;db-&gt;query("select * from users order by created_at desc limit $limit")-&gt;result();
}
if(isset($GLOBALS['users']) != NULL &amp;&amp; count($GLOBALS['users'])&gt;0){
    $user = array_shift($GLOBALS['users']);
    $smarty-&gt;assign('user', $user);
    if (count($GLOBALS['users']) == 0){
        unset($GLOBALS['users']);
        $repeat = false;
    }
    $repeat = true;
}else {
    $repeat = false;
}

return $content;
</code></pre>

<p>}
?>
{% endcodeblock %}</p>

<p>这个function中有四个参数，$params参数存储的是标签中的属性信息，如上面的limit。$content是标签中间的内容，$smarty是smarty的实例对象，$repeat用于指定block是否重复执行。
解释完了function的参数，我想其中的执行原理应该很容易看明白了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Smarty template in CodeIgniter]]></title>
    <link href="http://qichunren.github.io/blog/2012-02-11-use-smarty-template-in-codeigniter/"/>
    <updated>2012-02-11T16:57:00+08:00</updated>
    <id>http://qichunren.github.io/blog/use-smarty-template-in-codeigniter</id>
    <content type="html"><![CDATA[<p><a href="http://codeigniter.com/">CodeIgniter</a>是一个不错的PHP开发框架，很合我的口味，我做的一些PHP项目就是用的它。</p>

<p><a href="http://www.smarty.net/">Smarty</a>是目前业界最著名的PHP模板引擎之一。它分离了逻辑代码和外在的内容，提供了一种易于管理和使用的方法，用来将原本与HTML代码混杂在一起的PHP代码逻辑分离。</p>

<p>一般来说使用原生PHP作为视图会比使用模板引擎高效，一些简单的项目或者个人开发者可以直接使用PHP，如果是大一点的项目，再加上要和美工配合，使用模板引擎会是分工明确，合作高效一些。</p>

<p>在CodeIgniter使用Smarty模板引擎一点也不复杂，这是因为CodeIgniter提供了<a href="http://codeigniter.org.cn/user_guide/general/creating_libraries.html">创建类库</a>的方便方法。</p>

<p>我这里使用的CodeIgniter和Smarty都是最新版本,2.1.0和3.1.7</p>

<p>1: 将Smarty包下载后，解压后，放入CodeIgniter项目中的application/libraries目录.
<code>
caojinhua:company caojinhua$ ls application/libraries/
Smarty.php  index.html  smarty/
caojinhua:company caojinhua$ ls application/libraries/smarty/
Smarty.class.php    SmartyBC.class.php  debug.tpl       plugins/        sysplugins/
</code></p>

<p>2: 在application/libraries目录中创建Smarty.php文件。
{% codeblock application/libraries/Smarty.php lang:php %}
&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');</p>

<p>require_once('smarty/Smarty.class.php');</p>

<p>class CI_Smarty extends Smarty {</p>

<pre><code>    function __construct(){
      parent::__construct();
            $this-&gt;compile_dir = FCPATH . "application/views/templates_c";
            $this-&gt;template_dir = FCPATH . "application/views/templates";
            $this-&gt;cache_dir = FCPATH . "application/views/cache";//缓存目录
            $this-&gt;caching = 1;
            //$this-&gt;cache_lifetime = 120; //缓存更新时间
            $this-&gt;debugging = false;
            $this-&gt;compile_check = true; // 检查当前的模板是否自上次编译后被更改；如果被更改了，它将重新编译该模板。
            //$this-&gt;force_compile = true; // 强制重新编译模板
            //$this-&gt;allow_php_templates= true; // 开启PHP模板
            $this-&gt;left_delimiter = "{"; //左定界符
            $this-&gt;right_delimiter = "}"; //右定界符
    }
</code></pre>

<p>}
?>
{% endcodeblock %}
根据代码中的smarty目录配置，需要在application/views中建立templates_c\templates\cache三个目录.
这就算创建好了。</p>

<p>3: 使用方法。
控制器中的代码:
{% codeblock application/controllers/debug.php lang:php %}
&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');</p>

<p>class Debug extends MY_Controller {</p>

<p>  function __construct()
  {</p>

<pre><code>parent::__construct();
// Write your own initialize code
</code></pre>

<p>  }</p>

<pre><code>function index(){
  $this-&gt;load-&gt;library('smarty');
  $this-&gt;smarty-&gt;assign("title","smarty template");
  $this-&gt;smarty-&gt;assign("body","欢迎使用smarty模板引擎");
  $arr = array(1 =&gt; 'number 1', 2 =&gt; 'number 2', 3 =&gt; 'number 3');
  $this-&gt;smarty-&gt;assign("myarray", $arr);
  $this-&gt;smarty-&gt;display('index.html');
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>模板代码:
{% codeblock application/views/templates/index.html lang:html %}
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>smarty模板使用示例</title>
</head>
<body></p>

<h1>{$title}</h1>


<p>{$body}</p>


<ul>
        {foreach from=$myarray item=v}
        <li>{$v}</li>
       {/foreach}
</ul>


<p></body>
</html>
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
