<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-09-25T12:57:50+08:00</updated><id>/feed.xml</id><title type="html">Qichunren blog</title><subtitle>Record my thoughts, development notes.</subtitle><entry><title type="html">解决Ruby Gem 扩展的交叉编译</title><link href="/posts/2019-09-25-fixed-gem-extension-build-on-arm-buildroot.html" rel="alternate" type="text/html" title="解决Ruby Gem 扩展的交叉编译" /><published>2019-09-25T10:20:00+08:00</published><updated>2019-09-25T10:20:00+08:00</updated><id>/posts/fixed-gem-extension-build-on-arm-buildroot</id><content type="html" xml:base="/posts/2019-09-25-fixed-gem-extension-build-on-arm-buildroot.html">&lt;p&gt;Fixed ruby gem package cross compile on ARM / i.MX6 with Buildroot tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ariaboard-coreboard.jpg&quot; alt=&quot;Ariaboard core board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 ARM 或者 i.MX6 平台上使用 Ruby 不是一件容易的事情，原因在于 &lt;a href=&quot;https://buildroot.org/&quot;&gt;Buildroot&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/maximeh/buildroot/blob/master/package/ruby/ruby.mk&quot;&gt;Ruby 包&lt;/a&gt; 中不支持在目标平台上编译带有 C/C++ 扩展的 GEM　包，像一些常用 GEM 包，如 &lt;a href=&quot;https://github.com/eventmachine/eventmachine&quot;&gt;Eventmachine&lt;/a&gt;、串口操作的 &lt;a href=&quot;https://github.com/hparra/ruby-serialport&quot;&gt;ruby-serialport&lt;/a&gt; 等都没有办法在目标平台上使用，只能安装使用纯 Ruby 代码编写的 GEM 包。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ruby-buildroot-package-problem.png&quot; alt=&quot;Ruby Buildroot package problem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在解决问题的过程中，我查找了不少资料，包括 Buildroot的，包括 gcc 编译相关的，最终都无果。&lt;/p&gt;

&lt;p&gt;后来我突发奇想，Ruby 源代码中的 ext 目录的 C 扩展的标准库都可以编译出来，如 socket 、readline 等，那我将 GEM 包的源代码放进 ext 目录中是不是也可以直接作为标准库的一部分给自动编译出来呢？答案是可以的，不过有一些问题需要注意。&lt;/p&gt;

&lt;p&gt;观察 &lt;a href=&quot;https://github.com/ruby/ruby/tree/master/ext&quot;&gt;ext 目录&lt;/a&gt; 中的 C 扩展接口，发现每个 C 扩展目录中带有一个 &lt;em&gt;extconf.rb&lt;/em&gt; 文件，C 代码直接位于目录中，然后其中的 lib 目录中是 Ruby 的代码。所以我将 GEM 包的 ext 目录中的内容复制到扩展目录中，然后将 GEM 包的 lib 目录也复制到扩展目录，然后正常 configure / make / make install 的步骤就可以了。&lt;/p&gt;

&lt;p&gt;下面先在 x86 平台上来验证我的想法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.4.tar.gz
tar zxf ruby-2.6.4.tar.gz
wget https://github.com/hparra/ruby-serialport/archive/master.zip 
unzip master.zip
cd ruby-2.6.4
mkdir ext/serialport
cp -r ../ruby-serialport/ext/* ext/serialport/
cp -r ../ruby-serialport/lib ext/serialport/
./configure --prefix=/usr/local/ruby-2.6.4 --disable-install-doc
make
sudo make install
cd /usr/local/ruby-2.6.4/bin
./irb
irb(main):002:0&amp;gt; require 'serialport'
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功了，serialport 已经作为标准库的一部分，可以直接使用了。对于在 Buildroot中&lt;a href=&quot;https://github.com/maximeh/buildroot/blob/master/package/ruby/ruby.mk&quot;&gt;编译&lt;/a&gt;，可以使用 patch 的方法，将 GEM 包加到 ext 中，从而直接解决了交叉编译的难题。&lt;/p&gt;

&lt;p&gt;后记：在编译 &lt;a href=&quot;https://github.com/eventmachine/eventmachine&quot;&gt;Eventmachine&lt;/a&gt; 包的时候，不知道为什么需要手动在 project.h 和 em.h 文件中手动加入 #include “extconf.h” ，可能是 CPP 写的扩展包导致 extconf.h 头文件在 Makefile 中没有生效还是什么原因，待解决。&lt;/p&gt;</content><author><name></name></author><summary type="html">Fixed ruby gem package cross compile on ARM / i.MX6 with Buildroot tool.</summary></entry><entry><title type="html">Get started with autotools</title><link href="/posts/2016-08-15-get-started-with-autotools.html" rel="alternate" type="text/html" title="Get started with autotools" /><published>2016-08-15T15:20:00+08:00</published><updated>2016-08-15T15:20:00+08:00</updated><id>/posts/get-started-with-autotools</id><content type="html" xml:base="/posts/2016-08-15-get-started-with-autotools.html">&lt;p&gt;Follow this &lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/Hello-World.html#Hello-World&quot;&gt;tutorial&lt;/a&gt; to get started with autotools.&lt;/p&gt;

&lt;h3 id=&quot;configureac文件&quot;&gt;configure.ac文件&lt;/h3&gt;

&lt;p&gt;使用 &lt;em&gt;autoscan&lt;/em&gt; 工具生成 configure.scan 文件，将它重命名为 configure.ac ，默认的文件内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])

# Checks for programs.

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_OUTPUT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后创建如下的项目目录结构:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/main.c
README
configure.ac
Makefile.am
src/Makefile.am
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Command &lt;code class=&quot;highlighter-rouge&quot;&gt;autoreconf --install&lt;/code&gt; parse configure.ac into configure file.
Command &lt;code class=&quot;highlighter-rouge&quot;&gt;automake&lt;/code&gt; generate Makefile.in files.
Command &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; generate Makefie and src/Makefile from Makefile.in files.&lt;/p&gt;

&lt;p&gt;我这里有一个基础的使用autotools工具的&lt;a href=&quot;https://github.com/qichunren/glib-guide/tree/aa04d7151926ee197b7a16c57ddbff4db8673dc7&quot;&gt;项目&lt;/a&gt;，展示了其中最基本的用法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction&quot;&gt;An Introduction to the Autotools&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/automake/&quot;&gt;Automake homepage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://freesoftwaremagazine.com/books/autotools_a_guide_to_autoconf_automake_libtool/&quot;&gt;Autotools: a practitioner’s guide to Autoconf, Automake and Libtool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aireadfun.com/blog/2012/12/03/study-automake/&quot;&gt;Step-By-Step Example Of Autotools For Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://autotools.io/index.html&quot;&gt;Autotools Mythbuster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://openbooks.sourceforge.net/books/wga/creating-configuration.html&quot;&gt;Writing GNOME Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://autotools.io/index.html&quot;&gt;Autotools Mythbuster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Follow this tutorial to get started with autotools.</summary></entry><entry><title type="html">Work with binary data</title><link href="/posts/2016-06-22-work-with-binary-data.html" rel="alternate" type="text/html" title="Work with binary data" /><published>2016-06-22T11:25:00+08:00</published><updated>2016-06-22T11:25:00+08:00</updated><id>/posts/work-with-binary-data</id><content type="html" xml:base="/posts/2016-06-22-work-with-binary-data.html">&lt;p&gt;最近在做一些网络编程方面的东西，之前大多数情况接触的都是文本协议，现在接触的是二进制协议。在此补一下相关知识，下面基本上是以Ruby语言来描述用法。&lt;/p&gt;

&lt;p&gt;在Ruby中字面常量二近制数据以 0b 开头:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ irb
1.9.3-p194 :001 &amp;gt; 0b1010
 =&amp;gt; 10 
1.9.3-p194 :002 &amp;gt; 0b10
 =&amp;gt; 2 
1.9.3-p194 :003 &amp;gt; 0b11
 =&amp;gt; 3 
1.9.3-p194 :004 &amp;gt; 0b100
 =&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fixnumto_sbase--10&quot;&gt;Fixnum#to_s(base = 10)&lt;/h3&gt;

&lt;p&gt;Fixnum#to_s(base = 10) 方法用于各种进制之间的转换。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 二进制转换成十进制

$ irb
1.9.3-p194 :001 &amp;gt; 0b10.to_s(10)
 =&amp;gt; &quot;2&quot; 
1.9.3-p194 :002 &amp;gt; 0b11.to_s(10)
 =&amp;gt; &quot;3&quot; 
1.9.3-p194 :003 &amp;gt; 0b100.to_s(10)
 =&amp;gt; &quot;4&quot;
 
 
### 十进制转换成二进制

$ irb
1.9.3-p194 :001 &amp;gt; 10.to_s(2)
 =&amp;gt; &quot;1010&quot; 
1.9.3-p194 :002 &amp;gt; 4.to_s(2)
 =&amp;gt; &quot;100&quot; 
1.9.3-p194 :003 &amp;gt; 2.to_s(2)
 =&amp;gt; &quot;10&quot;

### 十六进制转换成十进制

0xFF.to_s(10) # &quot;255&quot; 
0xFF.to_s # &quot;255&quot; 
&quot;FF&quot;.hex # 255 

### 十六进制转换成二进制

0xFF.to_s(2) # &quot;11111111&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stringto_ibase--10&quot;&gt;String#to_i(base = 10)&lt;/h3&gt;

&lt;p&gt;String#to_i(base = 10) 方法用于将各种进制的字符串转换成十进制数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ irb
1.9.3-p194 :001 &amp;gt; &quot;0b100&quot;.to_i(2)
 =&amp;gt; 4 
1.9.3-p194 :002 &amp;gt; &quot;0100&quot;.to_i(10)
 =&amp;gt; 100 
1.9.3-p194 :003 &amp;gt; &quot;0xFF&quot;.to_i(16)
 =&amp;gt; 255   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：String#to_i方法的参数一定要和字符串本身的进制一致，否则将得不到预期的结果。&lt;/p&gt;

&lt;h3 id=&quot;packing-and-unpacking&quot;&gt;Packing and unpacking&lt;/h3&gt;

&lt;p&gt;String#unpack 和 Array#pack在网络程序中处理二进制时用得比较多。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ irb
 1.9.3-p194 :045 &amp;gt; &quot;\xff\x00\x2a&quot;.unpack('C*')
  =&amp;gt; [255, 0, 42]
 1.9.3-p194 :042 &amp;gt; [192,168,1,1].pack('C*')
  =&amp;gt; &quot;\xC0\xA8\x01\x01&quot; 
 1.9.3-p194 :043 &amp;gt; [255,255,255,255].pack('C*')
  =&amp;gt; &quot;\xFF\xFF\xFF\xFF&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面是一个UDP广播二进制数据的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'socket'

udp_socket = UDPSocket.new 
udp_socket.bind(&quot;0.0.0.0&quot;, 8086)
udp_socket.setsockopt(Socket::SOL_SOCKET, Socket::SO_BROADCAST, true) 
100.times do |i| 
    puts &quot;Broadcast message ...&quot;
    udp_socket.send([0x01, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x96, 0x96, 0xc1, 0x0c].pack('C*'), 0, &quot;255.255.255.255&quot;, 1112) 
    sleep 3
end     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;位操作&quot;&gt;位操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp; bitwise AND
| bitwise OR
^ bitwise XOR
~ bitwise NOT
&amp;gt;&amp;gt; right shift
&amp;lt;&amp;lt; left shift         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;一个字节是8位，每个位上是0或者1。判断字节中某一个是否是1，使用 &amp;amp; 操作判断结果是否大于0：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a_byte = 0b10100001
a_byte &amp;amp; (1 &amp;lt;&amp;lt; 0) # 1
a_byte &amp;amp; (1 &amp;lt;&amp;lt; 1) # 0
a_byte &amp;amp; (1 &amp;lt;&amp;lt; 5) # 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;整数数据类型&quot;&gt;整数数据类型&lt;/h3&gt;

&lt;p&gt;在 Ruby 中 Integer 没有像 大多数语言有区别 整数的数据类型 uint8, uint16, uint32&lt;/p&gt;

&lt;p&gt;将一个 Integer 转换成 int8： a_int &amp;amp; 0xff&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.bigbinary.com/2011/07/20/ruby-pack-unpack.html&quot;&gt;Ruby pack unpack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://calleerlandsson.com/2014/02/06/rubys-bitwise-operators/&quot;&gt;Ruby’s bitwise operators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dmendel/bindata&quot;&gt;Ruby bindata gem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">最近在做一些网络编程方面的东西，之前大多数情况接触的都是文本协议，现在接触的是二进制协议。在此补一下相关知识，下面基本上是以Ruby语言来描述用法。</summary></entry><entry><title type="html">Buildroot简单使用</title><link href="/posts/2016-06-21-use-buildroot-cross-build-app.html" rel="alternate" type="text/html" title="Buildroot简单使用" /><published>2016-06-21T18:12:00+08:00</published><updated>2016-06-21T18:12:00+08:00</updated><id>/posts/use-buildroot-cross-build-app</id><content type="html" xml:base="/posts/2016-06-21-use-buildroot-cross-build-app.html">&lt;p&gt;使用 &lt;a href=&quot;https://buildroot.org/&quot;&gt;Buildroot&lt;/a&gt; 可以方便的灵活的构建一个定制的用于嵌入式平台的Linux系统。&lt;/p&gt;

&lt;p&gt;公司里有自己开发的类beaglebone的核心板。我之前调试QT程序都时需要在板子里编译程序，很花费时间，也不方便。&lt;/p&gt;

&lt;p&gt;最近学会了使用Buildroot来跨平台编译程序，感觉我之前的做法太LOW了，现在在自己的开发机器中可以模拟出ARM平台的编译环境，编译好了的程序在目标机器中可以直接运行。&lt;/p&gt;

&lt;p&gt;Buildroot的用法很简单，在这里简单记录一下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://buildroot.org/download.html&quot;&gt;下载Buildroot&lt;/a&gt;压缩包到本地，解压。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在主目录里创建Config.in文件。在configs目录中有许多不同类型的文件已经创建好了，我们公司的ARM板是和beaglebone差不多，所以Config.in来自beaglebone_defconfig文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;调出编译配置界面，在这里可以对目标系统进行各种定制化，包括Kernel, Bootloader, 各种常用的软件包，系统配置等。
设置完成后退成。实际上UI的各种操作是对Config.in文件的操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;，编译完成后，在output目录下有编译好的文件。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;怎么样将自己写的程序集成到buildroot的packages中&quot;&gt;怎么样将自己写的程序集成到Buildroot的packages中？&lt;/h3&gt;

&lt;p&gt;在这里我以我写的一个名为hardware_report程序作为例子，我这个程序是用qt5写的，buildroot需要通过git clone的方式下载代码编译。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修改package目录中的Config.in文件，加入&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;menu &quot;Shanghai nt projects&quot;
  source &quot;package/hardware_report/Config.in&quot;
endmenu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;创将package/hardware_report目录，在其中创建Config.in和hardware_report.mk文件
Config.in文件中的内容如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config BR2_PACKAGE_HARDWARE_REPORT
  bool &quot;hardware_report&quot;
  help
          this is comment that explains what hardware_report is.
          https://git.xxxxxx.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;hardware_report.mk文件中的内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;################################################################################
#
# hardware-report
#
################################################################################

HARDWARE_REPORT_VERSION = master
HARDWARE_REPORT_SITE = git@git.xxxxxx.com:qichunren/hardware_report.git
HARDWARE_REPORT_SITE_METHOD = git
HARDWARE_REPORT_INSTALL_STAGING = YES
HARDWARE_REPORT_DEPENDENCIES = qt5base

define HARDWARE_REPORT_CONFIGURE_CMDS
        (cd $(@D); $(TARGET_MAKE_ENV) $(HOST_DIR)/usr/bin/qmake)
endef

define HARDWARE_REPORT_BUILD_CMDS
        $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)
endef

define HARDWARE_REPORT_INSTALL_STAGING_CMDS
        $(TARGET_MAKE_ENV) $(MAKE) -C $(@D) install
endef

#ifeq ($(BR2_PACKAGE_QT5DECLARATIVE),y)
#define PUDGE_GUI_INSTALL_QML
#$        cp -dpfr $(@D)/luna-pudge-ui $(TARGET_DIR)/usr/bin
#endef
#endif

define HARDWARE_REPORT_INSTALL_TARGET_CMDS
        cp -dpfr $(@D)/bin/hardware_report $(TARGET_DIR)/usr/bin
endef
        #$(QT5WEBKIT_EXAMPLES_INSTALL_QML)

$(eval $(generic-package))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;单独编译hardware_report项目可以执行&lt;code class=&quot;highlighter-rouge&quot;&gt;make hardware_report&lt;/code&gt;, 重新编译执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;make hardware_report-dirclean&lt;/code&gt;
目前重新编译hardware_report需要删除hardware_report的下载包 &lt;code class=&quot;highlighter-rouge&quot;&gt;rm dl/hardware_report-master.tar.gz&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置程序的自动启动，Buildroot制作的Linux系统自动启动很简单，直接在/etc/init.d/目录中写好启动脚本即可。首先需要开启overlay功能，然后创建overlay目录，在其中创建etc/init.d目录，在其中的init.d目录中添加S92hardware_report文件, 文件名必须以S开始，后面的数字表示启动顺序。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# System-V init script for the hardware_report&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Shanghai nt hardware report tool&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hardware_report&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	/usr/bin/hardware_report
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Stopping &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	killall &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; hardware_report
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  restart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Restarting &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; stop
        &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1
        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; start
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop|restart|reload|force-reload}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;2
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://buildroot.org/downloads/manual/manual.html&quot;&gt;Buildroot文档&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">使用 Buildroot 可以方便的灵活的构建一个定制的用于嵌入式平台的Linux系统。</summary></entry><entry><title type="html">Linux里GUI程序自启动</title><link href="/posts/2016-06-16-autostart-app-linux.html" rel="alternate" type="text/html" title="Linux里GUI程序自启动" /><published>2016-06-16T15:27:00+08:00</published><updated>2016-06-16T15:27:00+08:00</updated><id>/posts/autostart-app-linux</id><content type="html" xml:base="/posts/2016-06-16-autostart-app-linux.html">&lt;p&gt;将.desktop文件复制到 /home/${user}/.config/autostart/目录下即可。&lt;/p&gt;

&lt;p&gt;另外很多时候程序需要用root权限启动，需要修改.desktop文件, 在执行命令前加sudo&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Desktop Entry]
  Version=1.0
  Type=Application
  Terminal=false
  Name=NTPIS1
  Exec=sudo /usr/bin/nt-web-app
  Comment=Shanghai NT PIS 25t
  Icon=/usr/share/pixmaps/nt-web-icon.png
  StartupNotify=false
  Encoding=UTF-8
  Categories=Development;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了让自启动程序不用如入sudo的密码，还需要修改/etc/sudoers文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo visudo

add line

	%sudo   ALL=(ALL) NOPASSWD: /usr/bin/nt-web-app

after
	%sudo   ALL=(ALL:ALL) ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">将.desktop文件复制到 /home/${user}/.config/autostart/目录下即可。</summary></entry><entry><title type="html">Capture all reqeust web page send</title><link href="/posts/2016-03-24-capture-all-request-webpage-send.html" rel="alternate" type="text/html" title="Capture all reqeust web page send" /><published>2016-03-24T10:10:00+08:00</published><updated>2016-03-24T10:10:00+08:00</updated><id>/posts/capture-all-request-webpage-send</id><content type="html" xml:base="/posts/2016-03-24-capture-all-request-webpage-send.html">&lt;p&gt;The main process is to set QNetworkAccessManager instance to a QWebPage object, then use finished signal to capture QNetworkReply reply.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui-&amp;gt;setupUi(this);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::PluginsEnabled, true);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::AutoLoadImages, true);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::JavascriptEnabled, true);
    QWebSettings::globalSettings ()-&amp;gt;setAttribute (QWebSettings::DeveloperExtrasEnabled, true);
    static QWebView * view;
    view = new QWebView(this);
    ui-&amp;gt;verticalLayout-&amp;gt;addWidget(view);
    nm = new QNetworkAccessManager(this);
    QNetworkRequest *request = new QNetworkRequest(QUrl(&quot;http://music.baidu.com/song/s/6307e667db90856f3ab7c?fm=altg_new3&quot;));
    QWebPage *page = new QWebPage();
    page-&amp;gt;settings()-&amp;gt;setAttribute(QWebSettings::PluginsEnabled, true);
    page-&amp;gt;setNetworkAccessManager(nm);
    connect(nm, SIGNAL(finished(QNetworkReply*)), this, SLOT(when_reply_finished(QNetworkReply*)));
  //  const QWebFrame *frame = page-&amp;gt;mainFrame();
    view-&amp;gt;setPage(page);
    view-&amp;gt;load(*request);

}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::when_reply_finished(QNetworkReply *reply) {
    const QString &amp;amp;url = reply-&amp;gt;url().toString();
    qDebug() &amp;lt;&amp;lt; url;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">The main process is to set QNetworkAccessManager instance to a QWebPage object, then use finished signal to capture QNetworkReply reply.</summary></entry><entry><title type="html">FANN NOTES</title><link href="/posts/2015-08-18-fann-notes.html" rel="alternate" type="text/html" title="FANN NOTES" /><published>2015-08-18T20:30:00+08:00</published><updated>2015-08-18T20:30:00+08:00</updated><id>/posts/fann-notes</id><content type="html" xml:base="/posts/2015-08-18-fann-notes.html">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pythonic.zoomquiet.io/data/20120202112907/index.html&quot;&gt;用BP人工神经网络识别手写数字——《Python也可以》之三 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libfann/fann&quot;&gt;libfann/fann&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://neuralnetworksanddeeplearning.com/index.html&quot;&gt;Neural Networks and Deep Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://karpathy.github.io/neuralnets/&quot;&gt;Hacker’s guide to Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">用BP人工神经网络识别手写数字——《Python也可以》之三 libfann/fann Neural Networks and Deep Learning Hacker’s guide to Neural Networks</summary></entry><entry><title type="html">Wacthdog notes</title><link href="/posts/2015-08-18-watchdog-notes.html" rel="alternate" type="text/html" title="Wacthdog notes" /><published>2015-08-18T20:30:00+08:00</published><updated>2015-08-18T20:30:00+08:00</updated><id>/posts/watchdog-notes</id><content type="html" xml:base="/posts/2015-08-18-watchdog-notes.html">&lt;p&gt;第一种方法，通过一个SHELL脚本守护进程检查目标进程是否存在。&lt;/p&gt;

&lt;p&gt;第二中方法，通过一个守护进程与目标进程进行本地SOCKET通信。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/sbin:/usr/local/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;process_user_sig SIGUSR1

process_user_sig&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ntpis-watchdog is still alive!&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Waiting for ntpis startup....'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;30
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Watchdog starting....'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DROP_CACHE_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;runlevel | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LEVEL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;6&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LEVEL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LEVEL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;break
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PAIGOQT_PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;pidof &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ntpis&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;RESTARTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PAIGOQT_PID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; # ntpis is dead, restarting....&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /var/log/ntpis/info.log
        killall &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; ntpis
        /usr/bin/ntpis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-platform&lt;/span&gt; linuxfb
        &lt;span class=&quot;nv&quot;&gt;RESTARTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi

    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RESTARTED&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;30
        &lt;span class=&quot;k&quot;&gt;continue
    fi
done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二种方法详情见代码。&lt;/p&gt;</content><author><name></name></author><summary type="html">第一种方法，通过一个SHELL脚本守护进程检查目标进程是否存在。</summary></entry><entry><title type="html">Linux Deb package notes</title><link href="/posts/2015-08-06-linux-deb-notes.html" rel="alternate" type="text/html" title="Linux Deb package notes" /><published>2015-08-06T20:30:00+08:00</published><updated>2015-08-06T20:30:00+08:00</updated><id>/posts/linux-deb-notes</id><content type="html" xml:base="/posts/2015-08-06-linux-deb-notes.html">&lt;p&gt;使用dh_make命令可以在项目中生成默认的debian目录，此debian目录中包含了默认的deb打包规范的一系列文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dh_make --createorig --single -e whyruby@gmail.com -c gpl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是在项目目录中执行dh_make命令的时候，会提示项目目录必须要是project-name-1.0类似的形式。&lt;/p&gt;

&lt;p&gt;在dh_make命令执行后，继续运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dpkg-buildpackage -uc -us
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会在当前项目目录的上一层生成deb文件。&lt;/p&gt;

&lt;p&gt;deb包的构建规范中规定了一系列的规则，最常用的有安装时的文件路经对应，此文件位于debian/install中，如将编译文件的可执行文件将安装的/usr/bin目录，将程序执行图标文件放在/usr/share/applications目录。install文件中类似这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/new-pis usr/bin
new-pis.desktop /usr/share/applications
new-pis-icon.png /usr/share/pixmaps
db/data.db /var/lib/new-pis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;debian目录中其它的文件如提供cron job的文件，日志文件分割等以后深究。&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics.en.html&quot;&gt;Basics of the Debian package management system &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.debian.org/doc/manuals/debmake-doc/index.en.html&quot;&gt;Guide for Debian Maintainers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tldp.org/HOWTO/Debian-Binary-Package-Building-HOWTO/index.html&quot;&gt;Debian Binary Package Building HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">使用dh_make命令可以在项目中生成默认的debian目录，此debian目录中包含了默认的deb打包规范的一系列文件。</summary></entry><entry><title type="html">对使用http请求的GET和POST的一点思考</title><link href="/posts/2015-07-28-http-get-and-post.html" rel="alternate" type="text/html" title="对使用http请求的GET和POST的一点思考" /><published>2015-07-28T20:30:00+08:00</published><updated>2015-07-28T20:30:00+08:00</updated><id>/posts/http-get-and-post</id><content type="html" xml:base="/posts/2015-07-28-http-get-and-post.html">&lt;p&gt;对使用http请求的GET和POST的一点思考&lt;/p&gt;

&lt;p&gt;在web开发中，一个http请求方法有GET / HEAD / PUT / DELETE / OPTIONS / CONNECT几个形式，对此不多究。我今天主要想谈谈常见的GET和POST两种方法的使用思考。&lt;/p&gt;

&lt;p&gt;先来讲一个我最近做的一个 Ruby on Rails 项目，在那个项目中，用户(User)可以选择某一个数据集合(DataSet)项目参与其中做任务(Task)。模型关系如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  has_many :tasks       
end

class DataSet &amp;lt; ActiveRecord::Base

  def user_task(user)
    user.tasks.where(data_set_id: self.id).first
  end

end

class Task &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :data_set
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在数据集合(DataSet)列表页面，列出多个集合(DataSet)，用户可以选择其中一个参与任务(Task)。如果用户还没有参与其中的某个项目，显示“开始工作”，否则显示“继续工作”，页面部分代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &amp;lt;% @data_sets.each do |data_set| %&amp;gt;
        &amp;lt;div class=&quot;col-sm-6 col-md-4&quot;&amp;gt;
          &amp;lt;div class=&quot;thumbnail&quot;&amp;gt;
            &amp;lt;%= image_tag data_set.logo.url %&amp;gt;
            &amp;lt;div class=&quot;caption&quot;&amp;gt;
              &amp;lt;h3&amp;gt;&amp;lt;%= data_set.name %&amp;gt;&amp;lt;/h3&amp;gt;
              &amp;lt;p&amp;gt;&amp;lt;%= data_set.description %&amp;gt;&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;
                &amp;lt;% if data_set.user_task(current_user).present? %&amp;gt;
                  &amp;lt;%= link_to '继续工作', workspace_data_set_path(data_set), class: 'btn btn-primary' %&amp;gt;
                &amp;lt;% else %&amp;gt;
                  &amp;lt;%= link_to '开始工作', choose_task_data_set_path(data_set), method: :post, class: 'btn btn-primary' %&amp;gt;
                &amp;lt;% end %&amp;gt;
              &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DataSetsController中的部分代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class DataSetsController &amp;lt; ApplicationController
  before_action :authenticate_user!
  before_action :set_data_set, only: [:show, :edit, :update, :destroy, :choose_task, :workspace, :mark_picture]

  # GET /data_sets
  # GET /data_sets.json
  def index
    @data_sets = DataSet.all
  end

  # POST /data_sets/1/choose_task
  def choose_task
    if current_user.tasks.where(data_set_id: @data_set.id).first.nil?
      current_user.tasks.build(data_set_id: @data_set.id).save
    end

    redirect_to workspace_data_set_path(@data_set)
  end

  # GET /data_sets/1/workspace
  def workspace   
    # ...
  end
end 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当初在设计这个页面上逻辑的时候，一开始以为直接用一个方法请求就搞定了,页面点击“开始工作”或者“继续工作”按钮，直接GET请求跳转到用户工作台链接/data_sets/{id}/workspace，在workspace action中加入额外的逻辑判断是否要创建用户的任务(Task)。我接着认真思考了一下，发现这样不妥。原因有是GET /data_sets/{id}/workspace中的逻辑不纯粹， 与它的URL本身语义不符合。也不利于测试。&lt;/p&gt;

&lt;p&gt;那也许有人会说我将workspace这个action改成POST显示可以吗？答案也是不可以的，因为你点击按钮进入这个页面后，你如果刷新当前的workspace页面，浏览器会提示是否重复提交请求的提示，给用户的体验也不好。实质是这个请求不可cache。另外在其它页面地方也不能通过一般的a link的方式进入workspace页面，不可传播。&lt;/p&gt;

&lt;p&gt;现在我将这个逻辑分开写了 POST /data_sets/{id}/choose_task 和 GET /data_sets/{id}/workspace 两个请求，代码逻辑是很合理的。用户可以随意刷新他的工作台，而不用担心刷新会改变什么数据。&lt;/p&gt;

&lt;p&gt;啰嗦了这么多，其实这是一个很小的问题，但是容易忽略。之前在一个公司维护一个项目，发现页面中做的一个商品多条件查询表单居然是用POST请求的。每次在浏览器中查询商品后，按F5刷新，总是提示是否重复提交请求，用户体验很不好。另外我还没有办法把我查询找到的商品结果页面发给我其他的朋友。&lt;/p&gt;

&lt;p&gt;现在我来总结一下http请求的GET和POST方法使用。&lt;/p&gt;

&lt;p&gt;首先如名词所示，GET是用来从服务器上请求指定的资源，请求携带的信息都是体现在URL参数上面，如/products?category=1&amp;amp;color=red。URL长度有限制。&lt;/p&gt;

&lt;p&gt;POST是向服务器中提交数据，请求携带的信息一般放在http请求的消息体中，上传的数据长度在服务器端可以限制。&lt;/p&gt;

&lt;p&gt;从这里应该可以明确一点：GET请求应该不会带来影响的，重复请求不会改动服务器上的资源，它只负责取数据。POST请求是想服务器提交数据，重复提交动作对服务器资源是有影响的。那么GET请求是可以被前端缓存的，而POST请求不行。&lt;/p&gt;

&lt;p&gt;在用户的浏览器中，GET请求的URL是可以被保存书签的，POST请求不行。GET请求的URL是有历史记录的，可以前进 / 后退 / 刷新。POST请求则不行。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;</content><author><name></name></author><summary type="html">对使用http请求的GET和POST的一点思考</summary></entry></feed>