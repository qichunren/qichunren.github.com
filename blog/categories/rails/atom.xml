<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 蕲春人的博客]]></title>
  <link href="http://qichunren.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://qichunren.github.io/"/>
  <updated>2013-05-22T00:32:13+08:00</updated>
  <id>http://qichunren.github.io/</id>
  <author>
    <name><![CDATA[qichunren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Rails3中使用ajax]]></title>
    <link href="http://qichunren.github.io/blog/2011-12-22-use-ajax-in-rails3-note/"/>
    <updated>2011-12-22T16:36:00+08:00</updated>
    <id>http://qichunren.github.io/blog/use-ajax-in-rails3-note</id>
    <content type="html"><![CDATA[<p>今天写代码的时候突然发现 我之前在Rails3中使用ajax的方式是不太正确的，我走了弯路。</p>

<p>我之前在Rails3项目中使用ajax是这样的：</p>

<p>如果是直接发送一个ajax请求，我就给标签加上:remote => true。如果我在此基础上还要做其它的操作，如ajax表单提交前要对表单字段验证，我之前以为那样UJS就不能搞定了，需要我自己写代码来处理。然后我就使用jquery中的相关ajax操作来处理。</p>

<p>今天我才了解到UJS的AJAX操作已经为我们提供了6个自定义事件方法：</p>

<p><code>
ajax:before – right before ajax call
ajax:loading – before ajax call, but after XmlHttpRequest object is created)
ajax:success – successful ajax call
ajax:failure – failed ajax call
ajax:complete – completion of ajax call (after ajax:success and ajax:failure)
ajax:after – after ajax call is sent (note: not after it returns)
</code></p>

<p>所以对于上面我说的那个事例，如果要对一个ajax表单在提交前作表单验证或者其它的一些检查，只需要写提交前的检查代码，然后通过事件绑定的方式，将余下的表单ajax提交让UJS来完成，这是多么地简单啊，我以前真是做了好多无用功。</p>

<p>{% codeblock sample code lang:js %}
$(document).ready(function() {
  return $("#new_post_comment").bind("ajax:before", function() {</p>

<pre><code>if($("#post_comment_body").val()==""){
  return false;
}
</code></pre>

<p>  });
});
{% endcodeblock %}</p>

<h3>参考资料</h3>

<p><a href="http://net.tutsplus.com/tutorials/javascript-ajax/using-unobtrusive-javascript-and-ajax-with-rails-3/">Using Unobtrusive JavaScript and AJAX with Rails 3</a>
<a href="http://www.alfajango.com/blog/rails-3-remote-links-and-forms-data-type-with-jquery/">Rails 3 Remote Links and Forms Part 2: Data-type (with jQuery)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Jruby来部署Rails应用]]></title>
    <link href="http://qichunren.github.io/blog/2011-08-27-deploy-rails-project-with-jruby/"/>
    <updated>2011-08-27T06:36:22+08:00</updated>
    <id>http://qichunren.github.io/blog/deploy-rails-project-with-jruby</id>
    <content type="html"><![CDATA[<p>为了保护最近做的产品的源代码，需要将项目中的源代码进行保护起来。我目前了解到的方案有以下两种：</p>

<ol>
<li><p>使用代码混淆工具</p></li>
<li><p>使用JRuby将Ruby代码编译成java字节码文件（.class）</p></li>
</ol>


<hr />

<p>第一种方案，有一个名为<a href="http://rubyencoder.com">ruby encoder</a>的产品，我试用了一下，发现太重量级了，我个人只是一个可以将代码混淆一下的小工具而已，而ruby encoder有自己的运行加载机制，源代码二次编码，基于域名可以设置产品过期失效时间等等一系列功能，我不需要这些功能，另外它不是免费的，所以我没有采用这个方案。</p>

<p>第二种方安装就是使用JRuby。整体思路就是将Ruby项目的代码编译成java字节码文件，然后运行于Java环境中。</p>

<hr />

<p>将项目中的ruby文件编译成java的class文件不是一件容易的事情，所幸有一个名为warbler的gem可以帮助我们搞定这一切，它可以将项目打包(.war)，同时可以将ruby代码编译成class文件。然后你将生成好的.war文件放进JAVA应用服务器的应用目录中，如Tomcat的webapps中就可以了。</p>

<p>warbler提供若干个任务可供使用：
<code>
qichunren@qichunren-desktop:~/code/ntdeck$ warble -T
warble compiled    # Feature: precompile all Ruby files
warble config      # Generate a configuration file to customize your archive
warble executable  # Feature: make an executable archive
warble gemjar      # Feature: package gem repository inside a jar
warble pluginize   # Install Warbler tasks in your Rails application
warble version     # Display version of Warbler
warble war         # Create the project war file
warble war:clean   # Remove the project war file
warble war:debug   # Dump diagnostic information
</code></p>

<p>平时最常用的就是warble war命令了，需要关注的是warble的配置文件，它的配置文件是通过warble config来生成的，在这个文件中有一系列的配置项可以设置，以下是我的配置文件：
{% codeblock config/warble.rb lang:ruby %}</p>

<h1>Disable Rake-environment-task framework detection by uncommenting/setting to false</h1>

<h1>Warbler.framework_detection = false</h1>

<h1>Warbler web application assembly configuration file</h1>

<p>Warbler::Config.new do |config|
  # Features: additional options controlling how the jar is built.
  # Currently the following features are supported:
  # - gemjar: package the gem repository in a jar file in WEB-INF/lib
  # - executable: embed a web server and make the war executable
  # - compiled: compile .rb files to .class files
  config.features = %w(executable compiled)</p>

<p>  # Application directories to be included in the webapp.
  config.dirs = %w(app config db lib log vendor tmp)</p>

<p>  # Additional files/directories to include, above those in config.dirs
  # config.includes = FileList["db"]</p>

<p>  # Additional files/directories to exclude
  # config.excludes = FileList["lib/tasks/*"]</p>

<p>  # Additional Java .jar files to include.  Note that if .jar files are placed
  # in lib (and not otherwise excluded) then they need not be mentioned here.
  # JRuby and JRuby-Rack are pre-loaded in this list.  Be sure to include your
  # own versions if you directly set the value
  # config.java_libs += FileList["lib/java/*.jar"]</p>

<p>  # Loose Java classes and miscellaneous files to be included.
  # config.java_classes = FileList["target/classes/<em>*.</em>"]</p>

<p>  # One or more pathmaps defining how the java classes should be copied into
  # the archive. The example pathmap below accompanies the java_classes
  # configuration above. See http://rake.rubyforge.org/classes/String.html#M000017
  # for details of how to specify a pathmap.
  # config.pathmaps.java_classes &lt;&lt; "%{target/classes/,}p"</p>

<p>  # Bundler support is built-in. If Warbler finds a Gemfile in the
  # project directory, it will be used to collect the gems to bundle
  # in your application. If you wish to explicitly disable this
  # functionality, uncomment here.
  # config.bundler = false</p>

<p>  # An array of Bundler groups to avoid including in the war file.
  # Defaults to ["development", "test"].
  # config.bundle_without = []</p>

<p>  # Other gems to be included. If you don't use Bundler or a gemspec
  # file, you need to tell Warbler which gems your application needs
  # so that they can be packaged in the archive.
  # For Rails applications, the Rails gems are included by default
  # unless the vendor/rails directory is present.
  # config.gems += ["activerecord-jdbcmysql-adapter", "jruby-openssl"]
  # config.gems &lt;&lt; "tzinfo"</p>

<p>  # Uncomment this if you don't want to package rails gem.
  # config.gems -= ["rails"]</p>

<p>  # The most recent versions of gems are used.
  # You can specify versions of gems by using a hash assignment:
  # config.gems["rails"] = "2.3.10"</p>

<p>  # You can also use regexps or Gem::Dependency objects for flexibility or
  # finer-grained control.
  # config.gems &lt;&lt; /<sup>merb-/</sup>
  # config.gems &lt;&lt; Gem::Dependency.new("merb-core", "= 0.9.3")</p>

<p>  # Include gem dependencies not mentioned specifically. Default is
  # true, uncomment to turn off.
  # config.gem_dependencies = false</p>

<p>  # Array of regular expressions matching relative paths in gems to be
  # excluded from the war. Defaults to empty, but you can set it like
  # below, which excludes test files.
  # config.gem_excludes = [/<sup>(test|spec)\//]</sup></p>

<p>  # Pathmaps for controlling how application files are copied into the archive
  # config.pathmaps.application = ["WEB-INF/%p"]</p>

<p>  # Name of the archive (without the extension). Defaults to the basename
  # of the project directory.
  config.jar_name = "ntdeck"</p>

<p>  # Name of the MANIFEST.MF template for the war file. Defaults to a simple
  # MANIFEST.MF that contains the version of Warbler used to create the war file.
  # config.manifest_file = "config/MANIFEST.MF"</p>

<p>  # When using the 'compiled' feature and specified, only these Ruby
  # files will be compiled. Default is to compile all .rb files in
  # the application.
  # config.compiled_ruby_files = FileList['app/<strong>/<em>.rb']
  compile_me = FileList[</em>config.dirs.map {|x| "#{x}/</strong>/<em>.rb"}].exclude("config/compass.rb").exclude("lib/printer/</em>")
  config.compiled_ruby_files = compile_me</p>

<p>  # === War files only below here ===</p>

<p>  # Path to the pre-bundled gem directory inside the war file. Default
  # is 'WEB-INF/gems'. Specify path if gems are already bundled
  # before running Warbler. This also sets 'gem.path' inside web.xml.
  # config.gem_path = "WEB-INF/vendor/bundler_gems"</p>

<p>  # Files for WEB-INF directory (next to web.xml). This contains
  # web.xml by default. If there is an .erb-File it will be processed
  # with webxml-config. You may want to exclude this file via
  # config.excludes.
  # config.webinf_files += FileList["jboss-web.xml"]</p>

<p>  # Files to be included in the root of the webapp.  Note that files in public
  # will have the leading 'public/' part of the path stripped during staging.
  # config.public_html = FileList["public/<strong>/*", "doc/</strong>/*"]</p>

<p>  # Pathmaps for controlling how public HTML files are copied into the .war
  # config.pathmaps.public_html = ["%{public/,}p"]</p>

<p>  # Value of RAILS_ENV for the webapp -- default as shown below
  # config.webxml.rails.env = ENV['RAILS_ENV'] || 'production'</p>

<p>  # Application booter to use, one of :rack, :rails, or :merb (autodetected by default)
  # config.webxml.booter = :rails</p>

<p>  # Set JRuby to run in 1.9 mode.
  # config.webxml.jruby.compat.version = "1.9"</p>

<p>  # When using the :rack booter, "Rackup" script to use.
  # - For 'rackup.path', the value points to the location of the rackup
  # script in the web archive file. You need to make sure this file
  # gets included in the war, possibly by adding it to config.includes
  # or config.webinf_files above.
  # - For 'rackup', the rackup script you provide as an inline string
  #   is simply embedded in web.xml.
  # The script is evaluated in a Rack::Builder to load the application.
  # Examples:
  # config.webxml.rackup.path = 'WEB-INF/hello.ru'
  # config.webxml.rackup = %{require './lib/demo'; run Rack::Adapter::Camping.new(Demo)}
  # config.webxml.rackup = require 'cgi' &amp;&amp; CGI::escapeHTML(File.read("config.ru"))</p>

<p>  # Control the pool of Rails runtimes. Leaving unspecified means
  # the pool will grow as needed to service requests. It is recommended
  # that you fix these values when running a production server!
  config.webxml.jruby.min.runtimes = 1
  config.webxml.jruby.max.runtimes = 1</p>

<p>  # JNDI data source name
  # config.webxml.jndi = 'jdbc/rails'
end</p>

<p>{% endcodeblock %}</p>

<p>需要注意的是config.features = %w(executable compiled)配置中，其中的compiled就是可以将ruby代码编译成class代码的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set proxy in server side to get crossing domain ajax request]]></title>
    <link href="http://qichunren.github.io/blog/2011-08-18-proxy-in-server-side-for-ajax-crossing-domain/"/>
    <updated>2011-08-18T07:12:12+08:00</updated>
    <id>http://qichunren.github.io/blog/proxy-in-server-side-for-ajax-crossing-domain</id>
    <content type="html"><![CDATA[<p>{% codeblock proxy_controller.rb lang:ruby %}
class ProxyController &lt; ApplicationController</p>

<p>  # GET /proxy/:url
  def get_handle</p>

<pre><code>require 'open-uri'
file = open(params[:url])
contents = file.read
render :text =&gt; contents
</code></pre>

<p>  end</p>

<p>end
{% endcodeblock  %}</p>

<p>{% codeblock in config/routes.rb lang:ruby %}
get "/proxy" => "proxy#get_handle"
{% endcodeblock %}</p>

<p>{% codeblock javascript useage lang:js %}
$.get("/proxy?url=" + remote_url, function(data){
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix problem annotate is broken with rails 3.1.1]]></title>
    <link href="http://qichunren.github.io/blog/2011-06-03-fix-annotate-gem-with-rails3-1-1/"/>
    <updated>2011-06-03T22:01:00+08:00</updated>
    <id>http://qichunren.github.io/blog/fix-annotate-gem-with-rails3-1-1</id>
    <content type="html"><![CDATA[<p>今天在做一个小工具，使用最新的Rails版本3.1.1, 在使用annotate(2.4.0)这个gem的时候出错了：
<code>``
caojinhua:tts_cacher caojinhua$ annotate
/Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.1/lib/active_record/railties/databases.rake:3:in</code><top (required)>': undefined method `namespace' for main:Object (NoMethodError)</p>

<pre><code>from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.1/lib/active_record/railtie.rb:26:in `load'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.1/lib/active_record/railtie.rb:26:in `block in &lt;class:Railtie&gt;'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/railtie.rb:183:in `call'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/railtie.rb:183:in `block in load_tasks'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/railtie.rb:183:in `each'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/railtie.rb:183:in `load_tasks'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/engine.rb:396:in `block in load_tasks'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/application/railties.rb:8:in `each'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/application/railties.rb:8:in `all'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/engine.rb:396:in `load_tasks'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/application.rb:103:in `load_tasks'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.1/lib/rails/railtie/configurable.rb:30:in `method_missing'
from Rakefile:7:in `&lt;top (required)&gt;'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/annotate-2.4.0/lib/annotate.rb:17:in `load'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/annotate-2.4.0/lib/annotate.rb:17:in `load_tasks'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/gems/annotate-2.4.0/bin/annotate:66:in `&lt;top (required)&gt;'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/bin/annotate:19:in `load'
from /Users/caojinhua/.rvm/gems/ruby-1.9.2-p180/bin/annotate:19:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>然后在stackoverflow上找到了解决方法，就是使用最新的annotate.</p>

<p><code>ruby Gemfile
gem 'annotate', :git =&gt; 'git://github.com/ctran/annotate_models.git'
</code></p>

<h3>Resources:</h3>

<p><a href="http://stackoverflow.com/questions/7295505/annotate-gem-and-rails-3-1">annotate-gem-and-rails-3-1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Unicorn]]></title>
    <link href="http://qichunren.github.io/blog/2011-05-13-use-unicorn-in-rails/"/>
    <updated>2011-05-13T07:12:12+08:00</updated>
    <id>http://qichunren.github.io/blog/use-unicorn-in-rails</id>
    <content type="html"><![CDATA[<h3>Install</h3>

<p><code>
gem install unicorn
</code></p>

<p>Then add gem 'unicorn' to Gemfile.
bundle exec unicorn_rails to start rails app at 8080 port.</p>

<p>```
caojinhua:qichunren.github.com caojinhua$ unicorn_rails --help
Usage: unicorn_rails [ruby options] [unicorn_rails options] [rackup config file]
Ruby options:
  -e, --eval LINE          evaluate a LINE of code
  -d, --debug              set debugging flags (set $DEBUG to true)
  -w, --warn               turn warnings on for your script
  -I, --include PATH       specify $LOAD_PATH (may be used more than once)
  -r, --require LIBRARY    require the library, before executing your script
unicorn_rails options:
  -o, --host HOST          listen on HOST (default: 0.0.0.0)
  -p, --port PORT          use PORT (default: 8080)
  -E, --env RAILS_ENV      use RAILS_ENV for defaults (default: development)
  -D, --daemonize          run daemonized in the background
  -l {HOST:PORT|PATH},     listen on HOST:PORT or PATH</p>

<pre><code>  --listen             this may be specified multiple times
                       (default: 0.0.0.0:8080)
</code></pre>

<p>  -c, --config-file FILE   Unicorn-specific config file</p>

<pre><code>  --path PATH          Runs Rails app mounted at a specific path.
                       (default: /)
</code></pre>

<p>Common options:
  -h, --help               Show this message
  -v, --version            Show version
```</p>

<p>This is a smaple unicorn config file:</p>

<p>{% codeblock config/unicorn.conf.rb lang:ruby %}
worker_processes 2
working_directory "/www/temp/ntmenu2/current"
listen 3000, :tcp_nopush => true
timeout 30
pid "/www/temp/ntmenu2/current/tmp/pids/unicorn.pid"
stderr_path "/www/temp/unicorn.stderr.log"
stdout_path "/www/temp/unicorn.stdout.log"
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
